 // This is the Java grammar that is used (via an INCLUDE) in the CongoCC
 // tool itself but it can be used on its own, and you are free to use it
 // in your own projects. It supports the stable feature set of the Java
 // language up to JDK 24.
 // This grammar is a forward evolution of the sample Java grammar originally
 // included in the legacy JavaCC distribution in 1997 or thereabouts, but is
 // close to being a total rewrite, and serves as a kind of showcase for the latest
 // features in CongoCC, since many constructs are expressed in a very clean
 // and elegant way that is simply not possible with the legacy tool.

JAVA_UNICODE_ESCAPE;
PARSER_PACKAGE=org.parsers.java;
NODE_PACKAGE=org.parsers.java.ast;
DEFAULT_LEXICAL_STATE=JAVA;
// "non-sealed" cannot be a contextual token because,
// unlike typical contextual keywords, it is not
// matched by a more general pattern (usually IDENTIFIER)
DEACTIVATE_TOKENS=NON_SEALED;
TEST_PRODUCTION=CompilationUnit;
TEST_EXTENSION=java;


#if FT
FAULT_TOLERANT;
FAULT_TOLERANT_DEFAULT=false;
#endif

TAB_SIZE=4;
ENSURE_FINAL_EOL;

INCLUDE "JavaLexer.ccc"

Node Root#void :
   ModularCompilationUnit {return peekNode();}
   |
   CompilationUnit {return peekNode();}
;

ModularCompilationUnit :
   (ImportDeclaration)*
   (Annotation)*
   ['open']
   'module'
   =>||
   Name
   <LBRACE>
   (SCAN ~(<RBRACE>) => ModuleDirective)*
   <RBRACE>
   <EOF>
;

ModuleDirective :
   RequiresDirective
   |
   ExportsDirective
   |
   OpensDirective
   |
   UsesDirective
   |
   ProvidesDirective
;

RequiresDirective :
   'requires'
   ['transitive'|<STATIC>]
   Name
   <SEMICOLON>
;

ExportsDirective :
   'exports'
   Name
   [
     'to'
     Name (<COMMA> Name)*
   ]
   <SEMICOLON>
;

OpensDirective :
   'opens'
   Name
   [
     'to'
     Name (<COMMA> Name)*
   ]
   <SEMICOLON>
;

UsesDirective :
    'uses'
    Name
    <SEMICOLON>
;

ProvidesDirective :
    'provides'
    Name
    'with'
    Name
    (<COMMA> Name)*
    <SEMICOLON>
;

#CompilationUnit# :
  [ PackageDeclaration! ]
  ( ImportDeclaration )*!
  ( TypeDeclaration )*!
  [
    //a bit of a kludge so that CodeInjection2 in CongoCC.ccc can work. Maybe revisit.
    ENSURE {getTokenType(1) != RBRACE}
    <EOF>
  ]
  {
    return thisProduction;
  }
;

INJECT CompilationUnit :
{
    public PackageDeclaration getPackageDeclaration() {
      return firstChildOfType(PackageDeclaration.class);
    }
}

PackageDeclaration :
    (Annotation)*
    <PACKAGE>
    =>||
    Name
    <SEMICOLON>
;

INJECT PackageDeclaration :
{
    public String getName() {
       return firstChildOfType(Name.class).toString();
    }
}

ImportDeclaration : <_IMPORT> [ <STATIC> | 'module' ] Name [ <DOT> <STAR> ] <SEMICOLON> ;

Modifiers :
 (
  Annotation
  |
  (
   <PUBLIC>|<STATIC>|<PROTECTED>|<PRIVATE> |<FINAL>|<ABSTRACT>
   |<SYNCHRONIZED>|<NATIVE>|<TRANSIENT>|<VOLATILE>|<STRICTFP> |<_DEFAULT>
   |<SEALED>|<NON_SEALED> // SEALED and NON_SEALED are interesting. sealed
                          // is declared as a contextual token in the lexical grammar
                          // NON_SEALED can only match here if it was already cached
                          // because in a previous iteration, we hit the "non"+"-"+"sealed" biz.
  )
  ASSERT {
    permissibleModifiers == null || hasMatch(permissibleModifiers,lastConsumedToken),
    lastConsumedToken : "Modifier " + lastConsumedToken + " not permitted here."
  }
  {
    if (permissibleModifiers !=null) {
      TokenType tt = getTokenType(0);
      switch(tt) {
        case ABSTRACT :
        case FINAL :
           permissibleModifiers.remove(ABSTRACT);
           permissibleModifiers.remove(FINAL);
           break;
        case PRIVATE :
        case PROTECTED :
        case PUBLIC :
           permissibleModifiers.remove(PRIVATE);
           permissibleModifiers.remove(PROTECTED);
           permissibleModifiers.remove(PUBLIC);
           break;
        case SEALED :
        case NON_SEALED :
           permissibleModifiers.remove(SEALED);
           permissibleModifiers.remove(NON_SEALED);
           break;
        default :
           permissibleModifiers.remove(lastConsumedToken.getType());
      }
    }
  }
  |
  // The first time we hit a "non-sealed" the token is not activated
  // so we will see it via the rather silly looking lookahead below.
  // Then we activate the token and match it. This involves "uncaching"
  // the "non" + MINUS + "sealed" that we tokenized before and retokenizing!
  ENSURE {"non".equals(tokenImage(1))
           && "-".equals(tokenImage(2))
           && "sealed".equals(tokenImage(3))
           && getToken(3).getBeginOffset() == getToken(1).getEndOffset() + 1}
   ACTIVATE_TOKENS NON_SEALED (<NON_SEALED>)
   =>||
   ASSERT {permissibleModifiers==null || permissibleModifiers.contains(NON_SEALED),
   lastConsumedToken: "Modifier non-sealed not expected here."}
   {
     if (permissibleModifiers!=null) {
       permissibleModifiers.remove(SEALED);
       permissibleModifiers.remove(NON_SEALED);
     }
   }
 )*
 {permissibleModifiers = null;}#
;

INJECT PARSER_CLASS : {
  // Used to hold the set of modifiers that is permissible
  // at a given point in the parse. If this is null,
  // we are in some permissive mode where we accept any
  // modifiers.
  private EnumSet<TokenType> permissibleModifiers;
}

TypeDeclaration #interface :
  SCAN TypeDeclarationLA =>
  (
    EmptyDeclaration
    |
    AnnotationTypeDeclaration
    |
    ClassDeclaration
    |
    InterfaceDeclaration
    |
    EnumDeclaration
    |
    RecordDeclaration
  )
;


TypeDeclarationLA#scan :
   <SEMICOLON>
   |
   Modifiers
   (
     <CLASS>
     | <INTERFACE>
     | <ENUM>
     | <AT> <INTERFACE>
     | 'record' <IDENTIFIER>
   )
;

INJECT EmptyDeclaration : implements TypeDeclaration;
INJECT AnnotationTypeDeclaration : implements TypeDeclaration;
INJECT ClassDeclaration : implements TypeDeclaration;
INJECT InterfaceDeclaration : implements TypeDeclaration;
INJECT EnumDeclaration : implements TypeDeclaration;
INJECT RecordDeclaration : implements TypeDeclaration;

EmptyDeclaration# : <SEMICOLON> ;

TypeIdentifier#void :
   <IDENTIFIER>
   {String temp = tokenImage(0);}#
   ENSURE ASSERT {!temp.equals("record")
           && !temp.equals("var")
           && !temp.equals("permits")
           && !temp.equals("sealed")
           && !temp.equals("yield"),
           lastConsumedToken
          : "Illegal type name " + temp}
   =>||
;

ClassDeclaration :
  {permissibleModifiers = EnumSet.of(PUBLIC,
                                    PROTECTED, PRIVATE,
                                    ABSTRACT, FINAL, STATIC,
                                    STRICTFP, SEALED, NON_SEALED);}
  Modifiers
  <CLASS> =>||
  TypeIdentifier
  [ TypeParameters ]
  [ ExtendsList ]
  [ ImplementsList ]
  [ PermitsList ]
  ClassOrInterfaceBody
;

InterfaceDeclaration :
  {permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED,
                                     PRIVATE, ABSTRACT,
                                     STATIC, STRICTFP, SEALED,
                                     NON_SEALED);}
  Modifiers
  <INTERFACE> =>||
  TypeIdentifier // used in Translator?
  [ TypeParameters ]
  [ ExtendsList ]
  [ PermitsList ]
  ClassOrInterfaceBody
;

PermitsList :
   'permits'
   Name
   (<COMMA> Name)*
;

ExtendsList :
   <EXTENDS>
   ObjectType
   (
     SCAN \InterfaceDeclaration =>
     <COMMA> ObjectType
   )*
;

INJECT ExtendsList :
import java.util.List;
{
    public List<ObjectType> getTypes() {
        return childrenOfType(ObjectType.class);
    }
}

ImplementsList :
   <IMPLEMENTS> ObjectType
   (
     <COMMA> ObjectType
   )*
;


EnumDeclaration :
   {permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED,
                                      PRIVATE, ABSTRACT,
                                      FINAL, STATIC, STRICTFP);}
   Modifiers
   <ENUM> =>||
   TypeIdentifier
   [ImplementsList]
   EnumBody
;

EnumBody :
   <LBRACE>
   [ EnumConstant ( SCAN 2 <COMMA> EnumConstant)* ]
   [ <COMMA> ]
   [ <SEMICOLON> ( ClassOrInterfaceBodyDeclaration )*! ]
   <RBRACE>
;

RecordDeclaration :
  {permissibleModifiers = EnumSet.of(PUBLIC,
                                     PROTECTED, PRIVATE,
                                     ABSTRACT, FINAL,
                                     STATIC, STRICTFP);}
  Modifiers
  'record'
  TypeIdentifier
  =>||
  [TypeParameters]
  RecordHeader
  [ImplementsList]
  RecordBody
;

RecordHeader : <LPAREN> [ RecordComponent ( <COMMA> RecordComponent)* ] <RPAREN> ;

RecordComponent :
   (Annotation)* Type [(Annotation)* <VAR_ARGS> ] <IDENTIFIER>
   ASSERT {getTokenType(-1) != VAR_ARGS || getTokenType(1) != COMMA} : "The varargs (...) component must be the last one specified."
;

RecordBody :
  <LBRACE>
  (
   CompactConstructorDeclaration
   |
   ClassOrInterfaceBodyDeclaration
  )*
  <RBRACE>
;

CompactConstructorDeclaration :
  {permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE);}
  (Modifiers)
  TypeIdentifier
  <LBRACE> =>||
  (SCAN ~(<RBRACE>|ExplicitConstructorInvocation) => BlockStatement)*! // JEP 447
  [ ExplicitConstructorInvocation =>|| ]
  ( SCAN ~(<RBRACE>) => BlockStatement )*!
  <RBRACE>
;

INJECT CompactConstructorDeclarationn : extends ConstructorDeclaration

EnumConstant# :
  (Annotation)* <IDENTIFIER> [ InvocationArguments ] [ ClassOrInterfaceBody ]
;

TypeParameters :
   <LT>
   TypeParameter ( <COMMA> TypeParameter )*
   <GT>
;

INJECT TypeParameters :
  import java.util.List;
{
    public List<TypeParameter> getParameters() {
        return childrenOfType(TypeParameter.class);
    }
}

TypeParameter: (Annotation)* TypeIdentifier =>|| [TypeBound];

TypeBound :
   <EXTENDS> ObjectType ( <BIT_AND> ObjectType )*
;

ClassOrInterfaceBody : <LBRACE> (SCAN ~(<RBRACE>) => ClassOrInterfaceBodyDeclaration )*! <RBRACE> ;

ClassOrInterfaceBodyDeclaration#interface :
  Initializer
  |
  TypeDeclaration
  |
  ConstructorDeclaration
  |
  MethodDeclaration
  |
  FieldDeclaration
  |
  SCAN \.\InterfaceDeclaration =>
  FAIL "Not a valid interface body declaration." :
  |
  FAIL "Not a valid class body declaration."
;

INJECT TypeDeclaration : extends ClassOrInterfaceBodyDeclaration
INJECT Initializer : extends CodeBlock implements ClassOrInterfaceBodyDeclaration
INJECT ConstructorDeclaration : implements ClassOrInterfaceBodyDeclaration
INJECT FieldDeclaration : implements ClassOrInterfaceBodyDeclaration
INJECT MethodDeclaration : implements ClassOrInterfaceBodyDeclaration

FieldDeclaration :
  {permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED,
                                     PRIVATE, STATIC, FINAL,
                                     TRANSIENT, VOLATILE);}
  Modifiers
  Type =>|+1
  VariableDeclarator ( <COMMA> VariableDeclarator )* <SEMICOLON>
;

VariableDeclarator# : VariableDeclaratorId [ <ASSIGN> VariableInitializer ] ;

VariableDeclaratorId :
    <IDENTIFIER>
    ( (Annotation)* <LBRACKET> <RBRACKET> )*
    |
    SCAN ~\.\FieldDeclaration =>
    <UNDERSCORE>
;

VariableInitializer#void : ArrayInitializer | Expression ;

ArrayInitializer :
   <LBRACE> [ VariableInitializer ( SCAN 2 <COMMA> VariableInitializer )* ] [ <COMMA> ] <RBRACE>
;

#MethodDeclaration :
  (
    SCAN \.\.\InterfaceDeclaration
    =>
    {permissibleModifiers = EnumSet.of(PUBLIC,
                                      PRIVATE, ABSTRACT,
                                      STATIC, SYNCHRONIZED,
                                      NATIVE, STRICTFP,
                                      _DEFAULT);}
    |
    SCAN ~\...\TypeDeclaration // This is a kludge to support the code injection feature in CongoCC
                               // If we're not in a TypeDeclaration (most likely because we are in a CongoCC code injection)
                               // we just accept all the possible modifiers.
    =>
    {permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED,
                                       PRIVATE, ABSTRACT,
                                       STATIC, SYNCHRONIZED, FINAL,
                                       NATIVE, STRICTFP,
                                       _DEFAULT);}
    |
    {permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED,
                                      PRIVATE, ABSTRACT,
                                      STATIC, FINAL,
                                      SYNCHRONIZED, NATIVE,
                                      STRICTFP);}
  )
  Modifiers
  [ TypeParameters ]
  ReturnType
  <IDENTIFIER>
  =>|+1 FormalParameters ( (Annotation)* <LBRACKET><RBRACKET> )*
  [ ThrowsList ]
  ( Block | <SEMICOLON> )
  {return thisProduction;}
;

FormalParameters : <LPAREN> [ FormalParameter ( <COMMA> FormalParameter)* ] <RPAREN> ;

FormalParameter :
   {permissibleModifiers = EnumSet.of(FINAL);}#
   Modifiers Type
   {boolean hasVarArgs = false;}
   [ (Annotation)* <VAR_ARGS> {hasVarArgs = true;}]
   VariableDeclaratorId
   ASSERT {!hasVarArgs || getTokenType(1) != COMMA} : "The varargs (...) parameter must be the last one specified."
;

ConstructorDeclaration :
  {permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED, PRIVATE);}
  Modifiers
  [ TypeParameters ]
  TypeIdentifier =>|+1 FormalParameters
  [ ThrowsList ]
  <LBRACE>
  (SCAN ~(<RBRACE>|ExplicitConstructorInvocation) => BlockStatement)*! // JEP 447
  [ ExplicitConstructorInvocation =>||]!
  ( SCAN ~(<RBRACE>) => BlockStatement )*!
  <RBRACE>
;

ExplicitConstructorInvocation :
  [TypeArguments] (<THIS> | <SUPER>) =>|+1 InvocationArguments <SEMICOLON>
  |
  // Is this 100% correct? I think so, but it is not quite what the
  // language spec says. Maybe need to revisit this.
  (Name [<DOT><THIS> =>||] | Parentheses [<DOT> =>|+1 Name][<DOT><THIS> =>||])
  <DOT> [TypeArguments] <SUPER> =>|+1 InvocationArguments <SEMICOLON>
;

Initializer# :
  [ <STATIC> ] =>|+1 Block
;

Type#interface :
  (
   PrimitiveType ENSURE ~(<LBRACKET>) =>||
   |
   ReferenceType
  )
  =>||
;

INJECT ReferenceType : implements Type
INJECT PrimitiveArrayType : implements Type
INJECT PrimitiveType : implements Type

ReferenceType :
   PrimitiveArrayType =>||
   |
   ObjectType ((Annotation)* <LBRACKET><RBRACKET> =>||)*
;

ObjectType# :
    (Annotation)*
    TypeIdentifier [ TypeArguments ]
    ( <DOT> (Annotation)* <IDENTIFIER> =>|| [ TypeArguments ] )*
;

INJECT ObjectType : implements Type
{
    public boolean equals(Object obj) {
        if (obj instanceof ObjectType) {
            return ((ObjectType) obj).toString().equals(this.toString());
        }
        return false;
    }
}

DiamondOperator :  <LT><GT> =>|| ;

PossiblyEmptyTypeArguments #void :
   DiamondOperator
   |
   TypeArguments
;

TypeArguments :
  SCAN 2
  <LT> TypeArgument ( <COMMA> TypeArgument )*
   DEACTIVATE_TOKENS RSIGNEDSHIFT, RUNSIGNEDSHIFT (<GT>)
;

TypeArgument :
  (Annotation)* <HOOK> =>|| [ WildcardBounds ]
  |
  ReferenceType
;

WildcardBounds : (<EXTENDS> | <SUPER>) ReferenceType ;

PrimitiveType# :
  (Annotation)*
  (<BOOLEAN> | NumericType)
  =>||
;

NumericType#void :
 <CHAR> | <BYTE> | <SHORT> | <INT>
   | <LONG> | <FLOAT> | <DOUBLE>
;

PrimitiveArrayType : PrimitiveType ((Annotation)* <LBRACKET> =>|| <RBRACKET>)+ ;

ReturnType# : <VOID> | Type ;

Name# : <IDENTIFIER> (<DOT> <IDENTIFIER> =>||)* ;

ThrowsList : <THROWS> ExceptionType ( <COMMA> ExceptionType )* ;

ExceptionType#ObjectType :
    (Annotation)*
    <IDENTIFIER>
    (
       <DOT> <IDENTIFIER> =>||
    )*
    [
      <DOT> =>|+1
      (Annotation)+
      <IDENTIFIER>
    ]
    [TypeArguments]
;


INJECT Expression :
{
  default boolean canBeAssignedTo() {return false;}
  default boolean canBeThrown() {return false;}
}

INJECT PrimaryExpression : extends Expression
INJECT AdditiveExpression : implements Expression
INJECT ArrayInitializer : implements Expression
INJECT AndExpression : implements Expression
INJECT ConditionalAndExpression : implements Expression
INJECT ConditionalOrExpression : implements Expression
INJECT EqualityExpression : implements Expression
INJECT ExclusiveOrExpression : implements Expression
INJECT ExplicitConstructorInvocation : implements Expression
INJECT InclusiveOrExpression : implements Expression
INJECT InstanceOfExpression : implements Expression
INJECT ClassLiteral : implements PrimaryExpression
INJECT DotThis : implements PrimaryExpression
INJECT DotSuper : implements PrimaryExpression
INJECT LambdaExpression : implements Expression
INJECT MethodReference : implements PrimaryExpression
INJECT MultiplicativeExpression : implements Expression
INJECT PostfixExpression : implements Expression
INJECT PreDecrementExpression : implements Expression
INJECT PreIncrementExpression : implements Expression
INJECT RelationalExpression : implements Expression
INJECT ShiftExpression : implements Expression
INJECT StatementExpression : implements Expression
INJECT SwitchExpression : implements Expression
INJECT UnaryExpression : implements Expression
INJECT UnaryExpressionNotPlusMinus : implements Expression
INJECT AllocationExpression : implements PrimaryExpression
INJECT LiteralExpression : implements PrimaryExpression

INJECT DotNew : extends AllocationExpression {
  public boolean canBeThrown() {return true;}
}

INJECT AssignmentExpression : implements Expression {
  public boolean canBeThrown() {
    return ((Expression) getLastChild()).canBeThrown();
  }
}

INJECT Name : implements PrimaryExpression {
  public boolean canBeAssignedTo() {return true;}
  public boolean canBeThrown() {return true;}
}

INJECT DotName : implements PrimaryExpression {
  public boolean canBeAssignedTo() {return true;}
  public boolean canBeThrown() {return true;}
}

INJECT ArrayAccess : implements PrimaryExpression {
  public boolean canBeAssignedTo() {return true;}
  public boolean canBeThrown() {return true;}
}

INJECT MethodCall : implements PrimaryExpression {
  public boolean canBeThrown() {return true;}
}

INJECT TernaryExpression : implements Expression {
  public boolean canBeThrown() {
    return ((Expression) get(2)).canBeThrown()
    || ((Expression)get(4)).canBeThrown();}
}

INJECT LiteralExpression : implements Expression {
  public boolean canBeThrown() {
    return toString().equals("this");
  }
}

#Expression#interface :
    ConditionalOrExpression
    [
      (<HOOK> Expression <COLON> Expression) #TernaryExpression(+1)
      |
      {Expression lhs = (Expression) peekNode();}
      (AssignmentOperator Expression) #AssignmentExpression(+1)
      ASSERT {lhs.canBeAssignedTo(), lhs}
      : "The expression " + lhs + " cannot be assigned to."
    ]
    {return (Expression) peekNode();}
;

AssignmentOperator #void :
  <ASSIGN> | <STARASSIGN> | <SLASHASSIGN> | <REMASSIGN> | <PLUSASSIGN>
  | <MINUSASSIGN> | <LSHIFTASSIGN> | <RSIGNEDSHIFTASSIGN>
  | <RUNSIGNEDSHIFTASSIGN> | <ANDASSIGN> | <XORASSIGN> | <ORASSIGN>
;

ConditionalOrExpression :
  ConditionalAndExpression ( <SC_OR> ConditionalAndExpression )*
;

ConditionalAndExpression :
  InclusiveOrExpression ( <SC_AND> InclusiveOrExpression )*
;

InclusiveOrExpression :
  ExclusiveOrExpression ( <BIT_OR> ExclusiveOrExpression )*
;

ExclusiveOrExpression :
  AndExpression ( <XOR> AndExpression )*
;

AndExpression :
  EqualityExpression ( <BIT_AND> EqualityExpression )*
;

EqualityExpression :
  InstanceOfExpression ( ( <EQ> | <NE> ) InstanceOfExpression #EqualityExpression(3) )*
;

InstanceOfExpression :
  RelationalExpression
  [
    <INSTANCEOF>
    (
      LocalVariableDeclaration // This is a stable feature in JDK 16.
      |
      RecordPattern
      |
      ReferenceType
    )
  ]
;

RelationalExpression :
  ShiftExpression
  [
    ( <LT> | <GT> | <LE> | <GE>)
    ShiftExpression
  ]
;


ShiftExpression :
   AdditiveExpression
   [
     // Under certain conditions we scanned forward
     // and (incorrectly) scanned a >>, so we uncache
     // the tokens and end up rescanning!
     SCAN <GT> (<GT>|<RSIGNEDSHIFT>) => UNCACHE_TOKENS
   ]
   (
      (<LSHIFT> | <RSIGNEDSHIFT> | <RUNSIGNEDSHIFT>)
      AdditiveExpression #ShiftExpression(3)
   )*
;

AdditiveExpression :
  MultiplicativeExpression (  ( <PLUS> | <MINUS> ) MultiplicativeExpression )*
;

MultiplicativeExpression :
  UnaryExpression (  ( <STAR> | <SLASH>| <REM> ) UnaryExpression )*
;

UnaryExpression :
  ( <PLUS> | <MINUS> ) UnaryExpression
  |
  PreIncrementExpression
  |
  PreDecrementExpression
  |
  UnaryExpressionNotPlusMinus
;

PreIncrementExpression :
  <INCR> UnaryExpression
  ASSERT {((Expression)peekNode()).canBeAssignedTo(), peekNode()}
  : "Expression " + peekNode() + " is not an assignable variable."
;

PreDecrementExpression :
  <DECR> UnaryExpression
  ASSERT {((Expression)peekNode()).canBeAssignedTo(), peekNode()}
  : "Expression " + peekNode() + " is not an assignable variable."
;

UnaryExpressionNotPlusMinus :
  ( <TILDE> | <BANG> ) UnaryExpression
  |
  LambdaExpression
  |
  SwitchExpression
  |
  PrimitiveCastExpression
  |
  ObjectCastExpression
  |
  PostfixExpression
;

PostfixExpression :
  PrimaryExpression
  {Expression lhs = (Expression) peekNode();}
  [
    (<INCR> | <DECR>)
    ASSERT {lhs.canBeAssignedTo(), lhs : "Expression " + lhs + " cannot be assigned to."}
  ]
;

SwitchExpression# :
   SwitchStatement
;

INJECT CastExpression : implements Expression

INJECT PrimitiveCastExpression : extends CastExpression

INJECT ObjectCastExpression :
extends CastExpression
{
  public boolean canBeThrown() {
      return true;
  }
}

CastExpression :
   PrimitiveCastExpression
   |
   ObjectCastExpression
;

PrimitiveCastExpression :
   <LPAREN> PrimitiveType <RPAREN> =>|| UnaryExpression
;


ObjectCastExpression :
   <LPAREN>
   ReferenceType
   (<BIT_AND> ObjectType)*
   <RPAREN>
   =>|+1
   UnaryExpressionNotPlusMinus
;

PrimaryExpression#interface :
 (
  LiteralExpression
  |
  <THIS> #LiteralExpression
  |
  <SUPER> #LiteralExpression
  |
  Parentheses
  |
  AllocationExpression
  |
  ClassLiteral
  |
  MethodReference
  |
  Name
 )
 (
   ASSERT {!(peekNode() instanceof MethodReference) : "A method reference cannot be derereferenced."}
   ASSERT {!(getToken(0) instanceof NODE_PACKAGE.NumericalLiteral) : "A numerical literal cannot be derereferenced."}
   ASSERT {!(getToken(0) instanceof NODE_PACKAGE.BooleanLiteral) : "A boolean literal cannot be derereferenced."}
   (
    (<DOT> <THIS> =>||) #DotThis(+1)
    |
    (<DOT> <SUPER> =>||) #DotSuper(+1)
    |
    (<DOT> =>|+1 AllocationExpression) #DotNew(+1)
    |
    (<LBRACKET> Expression <RBRACKET>) #ArrayAccess(+1)
    |
    (<DOT> [TypeArguments] <IDENTIFIER>) #DotName(+1)
    |
    (<DOUBLE_COLON> [TypeArguments] (<IDENTIFIER>|<NEW>)) #MethodReference(+1)
    |
    ENSURE {getTokenType(0) == IDENTIFIER}
    InvocationArguments #MethodCall(+1)
   )
 )*
 ASSERT {getTokenType(0) != SUPER, getToken(0) : "Not a valid expression here " + getToken(0).getLocation()}
;

LiteralExpression# : Literal ;

Parentheses :
    <LPAREN>
    Expression {thisProduction.setNestedExpression((Expression) peekNode());}
    <RPAREN>
;

INJECT Parentheses : implements PrimaryExpression {
  @Property Expression nestedExpression; // TODO: remove this @Property after jar refresh
  public boolean canBeAssignedTo() {return nestedExpression.canBeAssignedTo();}
  public boolean canBeThrown() {return nestedExpression.canBeThrown();}
}

ClassLiteral :
  (
   <VOID><DOT><CLASS>
   |
   (
     <BOOLEAN>
     |
     NumericType
     |
     Name
   )
   (<LBRACKET><RBRACKET>)*
   <DOT>
   <CLASS>
  )
  =>||
;

MethodReference :
    (Type | <SUPER>)
     <DOUBLE_COLON> =>||
     [TypeArguments]
     (<IDENTIFIER>|<NEW>)
;

Literal #void :
  <INTEGER_LITERAL>
  |
  <LONG_LITERAL>
  |
  <FLOATING_POINT_LITERAL>
  |
  <CHARACTER_LITERAL>
  |
  <STRING_LITERAL>
  |
  <TEXT_BLOCK_LITERAL>
  |
  <TRUE>
  |
  <FALSE>
  |
  <NULL>
;

InvocationArguments :
    <LPAREN>
    [ Expression (<COMMA> Expression)* ]
    <RPAREN>
;

INJECT PrimitiveArrayInitialization : extends AllocationExpression
INJECT ObjectArrayInitialization : extends AllocationExpression

INJECT ObjectInstantiation : extends AllocationExpression
{
  public boolean canBeThrown() {return true;}
}

AllocationExpression#abstract :
  PrimitiveArrayInitialization
  |
  ObjectArrayInitialization
  |
  ObjectInstantiation
;

PrimitiveArrayInitialization :
   <NEW> PrimitiveType =>|| ArrayDimsAndInits
;

ObjectArrayInitialization :
   <NEW> [TypeArguments] ObjectType [PossiblyEmptyTypeArguments]
   =>|+1
   ArrayDimsAndInits
;

ObjectInstantiation :
   <NEW> [TypeArguments] ObjectType [PossiblyEmptyTypeArguments]
   =>|+1
   InvocationArguments [ClassOrInterfaceBody]
;

ArrayDimsAndInits :
  SCAN 2
  (
    <LBRACKET> =>|+1 Expression <RBRACKET>
  )+
  (
    (Annotation)* <LBRACKET><RBRACKET> =>||
  )*
  |
  (
    (Annotation)* <LBRACKET><RBRACKET>
  )+
  ArrayInitializer
;

Label : <IDENTIFIER><COLON> =>|| ;

LabeledStatement : Label =>|| Statement ;

Statement#interface  :
  LabeledStatement
  |
  AssertStatement
  |
  Block
  |
  YieldStatement
  |
  EmptyStatement
  |
  SwitchStatement
  |
  IfStatement
  |
  WhileStatement
  |
  DoStatement
  |
  ForStatement
  |
  BreakStatement
  |
  ContinueStatement
  |
  ReturnStatement
  |
  ThrowStatement
  |
  SynchronizedStatement
  |
  TryStatement
  |
  ExpressionStatement
;

INJECT AssertStatement : implements Statement;
INJECT BasicForStatement : extends ForStatement
INJECT BreakStatement : implements Statement
INJECT CodeBlock : implements Statement
INJECT ContinueStatement : implements Statement
INJECT DoStatement : implements Statement
INJECT EmptyStatement : implements Statement;
INJECT EnhancedForStatement : extends ForStatement
INJECT ExpressionStatement : implements Statement
INJECT ForStatement : implements Statement
INJECT IfStatement : implements Statement
INJECT LabeledStatement : implements Statement
INJECT LocalVariableDeclaration : implements Statement
INJECT ReturnStatement : implements Statement
INJECT SwitchStatement : implements Statement
INJECT SynchronizedStatement : implements Statement
INJECT ThrowStatement : implements Statement
INJECT TryStatement : implements Statement
INJECT WhileStatement : implements Statement
INJECT YieldStatement : implements Statement;

AssertStatement : <_ASSERT> Expression [ <COLON> Expression ] <SEMICOLON> ;

Block #CodeBlock : <LBRACE> (SCAN ~(<RBRACE>) => BlockStatement)*! <RBRACE> ;

BlockStatement#void :
 ASSERT ~((<FINAL>|Annotation)* (<PUBLIC>|<PRIVATE>|<PROTECTED>|<STATIC>))
 : "Cannot declare anything to be public, private, protected, or static  in a local context":
 (
  RecordDeclaration
  |
  ClassDeclaration
  |
  InterfaceDeclaration
  |
  EnumDeclaration
  |
  LocalVariableDeclaration { Node varDecl = peekNode(); }
  <SEMICOLON> {varDecl.add(popNode());}
  |
  Statement
 )
;

LocalVariableDeclaration :
   SCAN
   (
    Modifiers
    (
      'var' <IDENTIFIER>
      |
      Type (<IDENTIFIER>|<UNDERSCORE>)
    )
   )
   =>
   {permissibleModifiers = EnumSet.of(FINAL);}
   Modifiers
   (
      'var' VariableDeclarator
      |
      Type VariableDeclarator ( <COMMA> VariableDeclarator )*
   )
;

EmptyStatement# : <SEMICOLON> ;

StatementExpression# :
    Expression
    {Expression exp = (Expression) peekNode();}
    ASSERT {
        exp instanceof AssignmentExpression
        || exp instanceof PostfixExpression
        || exp instanceof PreDecrementExpression
        || exp instanceof PreIncrementExpression
        || exp instanceof MethodCall
        || exp instanceof ObjectInstantiation,
        exp:
        "Expression " + exp + " is not a valid statement.\n"
        + "Expecting a method invocation, an assignment, or an object instantiation, i.e. new Foobar(...)"
    }
;

ExpressionStatement : StatementExpression <SEMICOLON> ;

CasePattern :
    RecordPattern
    |
    TypePattern
;

RecordPattern :
    ReferenceType
    <LPAREN> =>||
    [
      SCAN ~(<RPAREN>) =>
      (
        <UNDERSCORE>
        |
        CasePattern
        (
          <COMMA>
          (<UNDERSCORE>|CasePattern)
        )*
      )
    ]
    <RPAREN>
;


TypePattern :
  {permissibleModifiers = EnumSet.of(FINAL);}#
  Modifiers
  (
    'var' <IDENTIFIER>
    |
    Type (<IDENTIFIER>|<UNDERSCORE>)
  )
;

WhenClause :
   'when'
   Expression
;

SwitchStatement :
  <SWITCH> <LPAREN> Expression <RPAREN>
  <LBRACE>
  [
    SCAN NewSwitchLabel =>
    (NewCaseStatement)+
    |
    SCAN ClassicSwitchLabel =>
    (ClassicCaseStatement)+
  ]
  <RBRACE>
;

INJECT SwitchStatement :
{
    /**
     * Is this a newer style switch statement, that uses
     * the -> arrow after case/default?
     */
    public boolean isNewStyle() {
      return firstChildOfType(NewCaseStatement.class) != null;
    }

    public Expression getSelectorExpression() {
      return (Expression) get(2);
    }
}

ClassicCaseStatement# :
  ClassicSwitchLabel
  (SCAN ~(<CASE>|<_DEFAULT>|<RBRACE>) => BlockStatement)*
;

NewSwitchLabel :
  CaseOrDefault
  <LAMBDA>
;

ClassicSwitchLabel :
  CaseOrDefault
  <COLON>
;


CaseOrDefault#void :
   <CASE> <NULL> =>|| [<COMMA><_DEFAULT>]
   |
   <CASE> CasePattern =>|| (<COMMA> CasePattern)* [WhenClause]
   |
   <CASE> Expression (<COMMA> Expression)*
   |
   <_DEFAULT>
;

NewCaseStatement :
   NewSwitchLabel
   (
     Block
     |
     ThrowStatement
     |
     SCAN 0 \SwitchStatement\SwitchExpression
     => Expression <SEMICOLON>
     |
     SCAN ~(<RBRACE>) =>
     BlockStatement
   )
;

IfStatement :
  <IF> <LPAREN> Expression <RPAREN> Statement [<ELSE> Statement]
;

INJECT IfStatement :
{
    public Node getElseBlock() {
      Node result = getLastChild();
      Token tok = (Token) result.previousSibling();
      if (tok.getType() == ELSE) return result;
      return null;
    }
}

WhileStatement :
  <WHILE> <LPAREN> Expression <RPAREN> Statement
;

DoStatement :
  <DO> Statement <WHILE> <LPAREN> Expression <RPAREN> <SEMICOLON>
;

ForStatement#abstract :
   BasicForStatement
   |
   EnhancedForStatement
   |
   <FOR> FAIL
;

BasicForStatement :
   <FOR> <LPAREN> [ForInit] <SEMICOLON> =>|| [Expression] <SEMICOLON> [StatementExpressionList] <RPAREN> Statement
;

EnhancedForStatement :
   <FOR> <LPAREN> LocalVariableDeclaration <COLON> =>|| Expression <RPAREN> Statement
;

ForInit#void :
  LocalVariableDeclaration
  |
  StatementExpressionList
;

StatementExpressionList#void :
  StatementExpression ( <COMMA> StatementExpression )*
;

BreakStatement :
  <BREAK> [ <IDENTIFIER> ] <SEMICOLON>
;

YieldStatement :
   SCAN 3
   'yield'
   Expression
   <SEMICOLON>
;

ContinueStatement : <CONTINUE> [ <IDENTIFIER> ] <SEMICOLON> ;

ReturnStatement : <RETURN> (Expression)? <SEMICOLON> ;

ThrowStatement :
    <THROW>
#if __csharp__
    Expression
#else
    {Expression exp;}
    exp=Expression
    ASSERT {
      exp.canBeThrown(),
      exp:
      "Expression " + exp + " is not throwable."
    }
#endif
    <SEMICOLON>
;

SynchronizedStatement : <SYNCHRONIZED> <LPAREN> Expression <RPAREN> Block ;

TryStatement :
  {
    boolean isTryWithResources=false,
            seenCatch = false,
            seenFinally = false;
  }
  <TRY>
  [ResourcesInTryBlock {isTryWithResources = true;}]
  Block
  (CatchBlock {seenCatch=true;})*
  [FinallyBlock{seenFinally=true;}]
  ASSERT {
    seenCatch || seenFinally || isTryWithResources,
    currentNodeScope.get(0):
    "A try-catch must have at least one catch or finally block if it is not a try-with-resources."
  }
;

ResourcesInTryBlock :
    <LPAREN>
    (
      // Note that the following assertions only apply after the first iteration.
      // This was broken for a good while in the non-Java languages since it was
      // checking this on the first iteration!
       ENSURE {getTokenType(0) == SEMICOLON}
       ENSURE {getTokenType(1) != RPAREN}
       =>||
       (
         LocalVariableDeclaration
         |
         Name
         |
         PrimaryExpression
         ASSERT {peekNode() instanceof DotName, peekNode()} : "Resource should be a field access here."
       )
       [<SEMICOLON>]
    )+
    <RPAREN>
;

CatchBlock :
    <CATCH>
    <LPAREN>
    [<FINAL>]
    ObjectType (<BIT_OR> (ObjectType) )* VariableDeclaratorId
    <RPAREN>
    Block
;

INJECT CatchBlock :
{
    public CodeBlock getBlock() {
        return firstChildOfType(CodeBlock.class);
    }
}

FinallyBlock : <FINALLY> Block;

INJECT FinallyBlock :
{
    public CodeBlock getBlock() {
        return firstChildOfType(CodeBlock.class);
    }
}

Annotation #interface :
 SCAN 2
 (
   NormalAnnotation
   |
   SingleMemberAnnotation
   |
   MarkerAnnotation
 )
;

NormalAnnotation : <AT> Name <LPAREN> =>|+2 [ MemberValuePairs ] <RPAREN> ;

MarkerAnnotation : <AT> Name ;

SingleMemberAnnotation : <AT> Name <LPAREN> =>|| MemberValue <RPAREN> ;

INJECT Annotation :
{
  default String getName() {return firstChildOfType(Name.class).toString();}
}

INJECT NormalAnnotation : implements Annotation
INJECT MarkerAnnotation : implements Annotation
INJECT SingleMemberAnnotation : implements Annotation

MemberValuePairs :
   MemberValuePair ( <COMMA> MemberValuePair )*
;

MemberValuePair :  <IDENTIFIER> <ASSIGN> MemberValue;

MemberValue :
   Annotation
   |
   MemberValueArrayInitializer
   |
   ConditionalOrExpression
;

MemberValueArrayInitializer :
  <LBRACE>
  [
     MemberValue ( <COMMA> =>|+1 MemberValue )* [<COMMA>]
  ]
  <RBRACE>
;


AnnotationTypeDeclaration :
  {permissibleModifiers = EnumSet.of(PUBLIC, PROTECTED,
                                    PRIVATE, ABSTRACT,
                                    STATIC, STRICTFP);}#
  Modifiers
  <AT> <INTERFACE> =>|| TypeIdentifier AnnotationTypeBody
;

AnnotationTypeBody :
  <LBRACE> ( AnnotationTypeMemberDeclaration )* <RBRACE>
;

AnnotationMethodDeclaration :
   {permissibleModifiers = EnumSet.of(PUBLIC, ABSTRACT);}#
   Modifiers
   Type <IDENTIFIER> <LPAREN> =>|| <RPAREN> [ DefaultValue ] <SEMICOLON>
;

AnnotationTypeMemberDeclaration :
  EmptyDeclaration
  |
  AnnotationTypeDeclaration
  |
  ClassDeclaration
  |
  InterfaceDeclaration
  |
  EnumDeclaration
  |
  AnnotationMethodDeclaration
  |
  FieldDeclaration
;

DefaultValue : <_DEFAULT> MemberValue ;

LambdaExpression :
  ENSURE {!isInProduction("NewSwitchLabel")}
  LambdaLHS =>|| (Block | Expression)
;

LambdaLHS : (<IDENTIFIER> | <UNDERSCORE> | SimpleLambdaLHS | LambdaParameters) <LAMBDA> =>|| ;

SimpleLambdaLHS #void :
   SCAN 3
   <LPAREN> (<IDENTIFIER>|<UNDERSCORE>)
   (<COMMA> (<IDENTIFIER>|<UNDERSCORE>))*
   <RPAREN>
;

LambdaParameters : <LPAREN> [ LambdaParameter ( <COMMA> LambdaParameter)* ] <RPAREN> ;

LambdaParameter :
    {permissibleModifiers = EnumSet.of(FINAL);}#
    Modifiers
    (
      Type (Annotation)* <VAR_ARGS> =>|| <IDENTIFIER>
      ASSERT ~(",") : "The varargs (...) parameter must be the last one specified.":
      |
      (
        'var'
        |
        Type
      )
      (
        <IDENTIFIER>((Annotation)* <LBRACKET><RBRACKET>)*
        |
        <UNDERSCORE>
      )
    )
;
