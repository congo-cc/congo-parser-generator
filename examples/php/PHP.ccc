DEFAULT_LEXICAL_STATE=PHP;
PARSER_PACKAGE="org.parsers.php";
ENSURE_FINAL_EOL;
TEST_PRODUCTION=Root;
TEST_EXTENSION=php;

INCLUDE "PHPLexer.ccc"

Root : LEXICAL_STATE PHP_OUTER (Scriptlet | <TEXT>)* <EOF> ;

Scriptlet : <SCRIPTLET_START> (Statement)* <SCRIPTLET_END> ;

Statement :
   CompoundStatement
   |
   NamedLabelStatement
   |
   IfStatement
   |
   SwitchStatement
;

CompoundStatement : <LBRACE> (Statement)* <RBRACE> ;

NamedLabelStatement : <NAME> ":" ;

ExpressionStatement : [Expression] ";" ;

IfStatement :
   <IF>
   "("
   Expression
   ")"
   (
     ":"
     (Statement)+
     (
        <ELSEIF>
        "("
        Expression
        ")"
        ":"
        (Statement)+
     )*
     [
        <ELSE>
        ":"
        "("
        Expression
        ")"
        (Statement)+
     ]
     |
     Statement
     (
        <ELSEIF>
        "("
        Expression
        ")"
        Statement
     )*
     [
         <ELSEIF>
         "("
         Expression
         ")"
         Statement
     ]
   )
;

SwitchStatement :
   <SWITCH>
   "("
   Expression
   ")"
   (
      <LBRACE>
      (CaseStatement)*
      <RBRACE>
      |
      ":"
      (CaseStatement)*
      <ENDSWITCH>
      ";"
   )
;

CaseStatement :
   <CASE>
   Expression
   (":"|";")
   (Statement)*
   |
   <DEFAULT>
   (":"|";")
   (Statement)*
;

WhileStatement :
   <WHILE>
   "("
   Expression
   ")"
   (
       Statement
       |
       ":"
       (Statement)+
       <ENDWHILE>
       ";"
   )
;

DoStatement :
   <DO>
   Statement
   <WHILE>
   "("
   Expression
   ")"
   ";"
;

ForStatement :
   <FOR>
   "("
   [
     Expression
     ("," Expression)*
   ]
   ";"
   [
      Expression
      ("," Expression)*
   ]
   ";"
   [
     Expression
     ("," Expression)*
   ]
   ")"
   (
     ":" (Statement)+
     |
     Statement
   )
;

ForeachStatement :
   <FOREACH>
   "("
   Expression
   ")"
   <AS>
   [Expression "=>"]
   (
      [<BIT_AND>] Expression
      |
      <LIST> "(" ListExpressionList ")"
   )
   ")"
   (
      Statement
      |
      ":" (Statement)+
   )
;

GotoStatement : <GOTO> <NAME> ;

ContinueStatement# :
    <CONTINUE>
    [ BreakoutLevel ]
;

BreakStatement# :
    <BREAK>
    [BreakoutLevel]
;

BreakoutLevel# :
   <INTEGER_LITERAL>
   |
   "(" [BreakoutLevel] ")"
;

ReturnStatement# : <RETURN> [Expression] ;

ThrowStatement# : <THROW> Expression ;

TryStatement :
   <TRY>
   CompoundStatement
   (
     FinallyClause
     |
     (CatchClause)+ [FinallyClause]
   )
;

CatchClause :
   <CATCH>
   (QualifiedName)+
;

FinallyClause :
    <FINALLY>
    CompoundStatement
;

QualifiedName# :
  [
   <BACKSLASH> ASSERT ~(<NAME>) =>||
   |
   [<BACKSLASH>]  <NAME> (<BACKSLASH> <NAME>)* <BACKSLASH>
   |
   <NAMESPACE> <BACKSLASH> [<NAME> (<BACKSLASH> <NAME>)* <BACKSLASH>]
  ]
  <NAME>
;

ListExpressionList : UnkeyedListExpressionList | KeyedListExpressionList ;

UnkeyedListExpressionList :
   "," ASSERT ~(ListOrVariable) =>||
   |
   [","] ListOrVariable (SCAN 2 "," ListOrVariable)* [","]
;

KeyedListExpressionList :
   Expression "=>" ListOrVariable
   ("," Expression "=>" ListOrVariable)*
;

Expression :
   IncludeExpression
   |
   IncludeOnceExpression
   |
   RequireExpression
   |
   RequireOnceExpression
;

RequireExpression :
   "require" Expression
;

RequireOnceExpression :
   "require_once" Expression
;

IncludeOnceExpression :
   "include_once" Expression
;

IncludeExpression :
   "include" Expression
;

ListOrVariable :
   <LIST> ListExpressionList
   |
   [<BIT_AND>] Variable
;

Variable :
   CallableVariable
   |
   ScopedPropertyAccessExpression
//   |
//   MemberAccessExpression
;

CallableVariable#void :
   SimpleVariable
//   |
//   SubscriptExpression
//   |
//   MemberCallExpression
//   |
//   ScopedCallExpression
//   |
//   FunctionCallExpression
;

FunctionCallExpression :
    (QualifiedName|CallableExpression)
    "("
    [
        ArgumentExpression
        (SCAN 2 "," ArgumentExpression)*
        [","]
    ]
    ")"
;

ArgumentExpression :
   [<ELLIPSIS>]
   Expression
;

CallableExpression :
   CallableVariable
   |
   "(" Expression ")"
   |
   ArrayCreationExpression
   |
   StringLiteral
;

StringLiteral#void :
   <SINGLE_QUOTE_STRING>
   |
   <DOUBLE_QUOTE_STRING>
   |
   <HEREDOC_STRING_LITERAL>
;

ArrayCreationExpression :
   <ARRAY> "(" [ArrayInitializer] ")"
   |
   <LBRACKET> [ArrayInitializer] <RBRACKET>
;

ArrayInitializer :
   ArrayElementInitializer
   (SCAN 2 "," ArrayElementInitializer)*
   [","]
;

ArrayElementInitializer :
   [Expression "=>" =>||]
   ["&"] Expression
;

ScopedCallExpression :
  (
   <SELF>
   |
   <PARENT>
   |
   <STATIC>
   |
   QualifiedName
   |
   DereferencableExpression
  )
  "::"
  MemberName
  "("
  [
    ArgumentExpression (SCAN 2 "," ArgumentExpression)* [","]
  ]
  ")"
;

MemberName :
   <NAME>
   |
   SimpleVariable
;

SimpleVariable :
  ("$")+
  (
    <NAME>
    |
    "{" Expression "}"
  )
;

DereferencableExpression :
   Variable
   |
   "(" Expression ")"
   |
   ArrayCreationExpression
   |
   StringLiteral
;

MemberCallExpression :
   DereferencableExpression
   "->"
   MemberName
   "("
   [
     ArgumentExpression (SCAN 2 "," ArgumentExpression)* [","]
   ]
   ")"
;

SubscriptExpression :
   DereferencableExpression
   (
     "[" [Expression] "]"
     |
     "{" Expression "}" // deprecated form
   )
;

MemberAccessExpression :
   DereferencableExpression "->" MemberName
;

ScopedPropertyAccessExpression :
   (
    "self" | "parent" | "static"
    | QualifiedName //| DereferencableExpression
   )
   "::"
   MemberName
   "("
   [
      ArgumentExpression (SCAN 2 "," ArgumentExpression)* [","]
   ]
   ")"
;


