PARSER_PACKAGE="fel";
SPECIAL_TOKENS_ARE_NODES=true;
DEFAULT_LEXICAL_STATE="FTL_EXPRESSION";
FAULT_TOLERANT=true;
MINIMAL_TOKEN;

#if __java__

INJECT FELParser :
{
   static public void main(String[] args) throws ParseException, IOException {
       String input = LEXER_CLASS.readFully(new java.io.InputStreamReader(System.in));
       FELParser parser = new FELParser(input);
       Node n = parser.Input();
       n.dump("  ");
   }
}

INJECT LEXER_CLASS :
    import java.io.Reader;
{
  static final int BUF_SIZE = 0x10000;

  static String readFully(Reader reader) throws IOException {
    char[] block = new char[BUF_SIZE];
    int charsRead = reader.read(block);
    if (charsRead < 0) {
        throw new IOException("No input");
    } else if (charsRead < BUF_SIZE) {
        char[] result = new char[charsRead];
        System.arraycopy(block, 0, result, 0, charsRead);
        reader.close();
        return new String(block, 0, charsRead);
    }
    StringBuilder buf = new StringBuilder();
    buf.append(block);
    do {
        charsRead = reader.read(block);
        if (charsRead > 0) {
            buf.append(block, 0, charsRead);
        }
    } while (charsRead == BUF_SIZE);
    reader.close();
    return buf.toString();
  }

// Annoying kludge really...
  static String readToEnd(Reader reader) {
    try {
        return readFully(reader);
    } catch (IOException ioe) {
        throw new RuntimeException(ioe);
    }
  }
}

#endif

INCLUDE "JavaIdentifierDef.ccc"

SKIP :
    <EXP_WHITE_SPACE : (" "|"\t"|"\n"|"\r")+>
;

MORE :
    <"<#--"> : EXPRESSION_COMMENT
    |
    <"<!--"> : EXPRESSION_COMMENT
    |
    <"[#--"> : EXPRESSION_COMMENT
;

<EXPRESSION_COMMENT> MORE : <~[]> ;

<EXPRESSION_COMMENT> SPECIAL_TOKEN :
    <"-->"> : FTL_EXPRESSION
    |
    <"--]"> : FTL_EXPRESSION
;

TOKEN :
    <OPEN_PAREN : "(">
    |
    <CLOSE_PAREN : ")">
    |
    <OPEN_BRACKET : "[">
    |
    <CLOSE_BRACKET : "]">
    |
    <OPEN_BRACE : "{">
    |
    <CLOSE_BRACE : "}">
    |
    <EQUALS : "=">
    |
    <DOT : ".">
    |
    <PLUS : "+">
    |
    <MINUS : "-">
    |
    <TIMES : "*">
    |
    <DIVIDE : "/">
    |
    <PERCENT : "%">
    |
    <OR : "|">
    |
    <AND : "&">
    |
    <LT : "<">
    |
    <GT : ">">
    |
    <COMMA : ",">
    |
    <COLON : ":">
    |
    <DOUBLE_COLON : "::">
    |
    <SEMICOLON : ";">
    |
    <EXCLAM : "!">
    |
    <BUILT_IN : "?">
    |
    <DOUBLE_EQUALS : "==">
    |
    <NOT_EQUALS : "!=">
    |
    <EXISTS_OPERATOR : "??">
    |
    <LTE : "<=">
    |
    <GTE : ">=">
    |
    <OR2 : "||">
    |
    <AND2 : "&&">
    |
    <DOT_DOT : "..">
    |
    <ALT_GT : "gt">
    |
    <ALT_LT : "lt">
    |
    <AS : "as">
    |
    <IN : "in">
    |
    <ALT_GTE : "gte">
    |
    <ALT_LTE : "lte">
    |
    <ELLIPSIS : "...">
    |
    <NULL : "null">
    |
    <TRUE : "true">
    |
    <FALSE : "false">
    |
    <USING : "using">
    |
    <INTEGER : (["0"-"9"])+>
    |
    <DECIMAL : <INTEGER> "." <INTEGER>>
    |
    <IDENTIFIER : ("@" | <JAVA_IDENTIFIER_START>) ("@" | <JAVA_IDENTIFIER_PART>)* >
    |
    <STRING_LITERAL :
      ("\""
          ((~["\\", "\""]) | ("\\" ~[]))*
      "\"")
      |
      ("'"
          ((~["\\", "'"]) | ("\\" ~[]))*
      "'")
   >
   |
   <RAW_STRING : "r" (("\"" (~["\""])* "\"") | ("'" (~["'"])* "'"))>
;

#if __java__

Node Input #void :
   Expression
   <EOF>
   {
       return rootNode();
   }
;

#endif

Expression :
    OrExpression
;

OrExpression :
    AndExpression
    (
        (<OR>|<OR2>) AndExpression
    )*
;

AndExpression :
    EqualityExpression
    (
        (<AND>|<AND2>) EqualityExpression
    )*
;

EqualityExpression :
    RelationalExpression
    [
        (<EQUALS>|<DOUBLE_EQUALS>|<NOT_EQUALS>)
        RelationalExpression
    ]
;

RelationalExpression :
    RangeExpression
    [
        (<GT>|<GTE>|<LT>|<LTE>|<ALT_GT>|<ALT_GTE>|<ALT_LTE>|<ALT_LT>)
        RangeExpression
    ]
;

RangeExpression :
    AdditiveExpression
    [
       <DOT_DOT>
       [
          AdditiveExpression =>||
       ]
    ]
;

AdditiveExpression :
    MultiplicativeExpression
    (
           (<PLUS>|<MINUS>)
           MultiplicativeExpression
    )*
;

MultiplicativeExpression :
    UnaryExpression
    (
          (<TIMES>|<DIVIDE>|<PERCENT>)
          UnaryExpression
    )*
;


UnaryExpression #void :
    UnaryPlusMinusExpression
    |
    NotExpression
    |
    DefaultToExpression
;

UnaryPlusMinusExpression :
    (<PLUS>|<MINUS>) DefaultToExpression
;

NotExpression :
    <EXCLAM>
    DefaultToExpression
;

BuiltinVariable :
    <DOT><IDENTIFIER>
;

DefaultToExpression :
    PrimaryExpression
    (
    // A bit ugly, REVISIT
        SCAN {getToken(2).getType() != TokenType.IDENTIFIER || getToken(3).getType() != TokenType.EQUALS}
        => <EXCLAM>PrimaryExpression =>||
    )*
    [
       <EXCLAM>
    ]
;

PrimaryExpression :
  BaseExpression
  (
      DotKey
      |
      MethodReference
      |
      DynamicKey
      |
      MethodInvoke
      |
      BuiltIn
      |
      Exists
  )*
;

BaseExpression :
    <IDENTIFIER>
    |
    NumberLiteral
    |
    HashLiteral
    |
    StringLiteral
    |
    BooleanLiteral
    |
    NullLiteral
    |
    ListLiteral
    |
    Parenthesis
    |
    BuiltinVariable
;


DotKey #void :
    <DOT>
    (<IDENTIFIER>|<TIMES>)
;

MethodReference#void :
    <DOUBLE_COLON>
    <IDENTIFIER>
;

DynamicKey #void :
    <OPEN_BRACKET>Expression<CLOSE_BRACKET>
;

MethodInvoke #void :
  <OPEN_PAREN>[ArgsList]<CLOSE_PAREN>
;

BuiltIn #void :
    <BUILT_IN><IDENTIFIER>
;

Exists :
    <EXISTS_OPERATOR>
;

ListLiteral :
    <OPEN_BRACKET>
    [Expression ([<COMMA>]Expression)*]
    <CLOSE_BRACKET>
;

StringLiteral :
    <STRING_LITERAL>|<RAW_STRING>
;


HashLiteral :
    <OPEN_BRACE>
    [
       Expression <COLON> Expression
       (<COMMA> Expression <COLON> Expression)*
    ]
    <CLOSE_BRACE>
;

NumberLiteral :
    <INTEGER>|<DECIMAL>
;

BooleanLiteral :
    <TRUE>|<FALSE>
;

NullLiteral : <NULL> ;

Parenthesis :
    <OPEN_PAREN> Expression <CLOSE_PAREN>
;

ArgsList #void :
    (
        SCAN <IDENTIFIER><EQUALS> =>
        NamedArgsList
        |
        PositionalArgsList
    )
;

NamedArgsList :
    <IDENTIFIER>
    <EQUALS>
    Expression
    (
       [<COMMA>]
       <IDENTIFIER>
       <EQUALS>
       Expression
    )*
;

PositionalArgsList :
    Expression
    (
       [<COMMA>]
       Expression
    )*
;

