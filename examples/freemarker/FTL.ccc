PARSER_PACKAGE="ftl";
DEFAULT_LEXICAL_STATE="TEMPLATE_TEXT";

#if __java__
INJECT PARSER_CLASS :
    import java.io.*;
    import java.util.*;
{
    static public void main(String[] args) throws Exception {
        if (args.length == 0) {
            usage();
            System.exit(-1);
        }
        java.util.List<File> files = new java.util.ArrayList<File>();
        for (String arg : args) {
            File file = new File(arg);
            if (file.isDirectory()) {
                for (File f : file.listFiles()) {
                    if (f.getName().endsWith(".ftl")) {
                        files.add(f);
                    }
                }
            } else {
                files.add(file);
            }
        }
        for (File f : files) {
            checkFTLFile(f, false);
        }
    }

    static public void checkFTLFile(File inputFile, boolean dumpTree) {
        FTLParser parser = null;
        try {
            parser = new FTLParser(inputFile.toPath());
            parser.Root();
        }
        catch (Exception e) {
            System.err.println("Error parsing " + inputFile);
            e.printStackTrace();
            return;
        }
        System.err.println("File " + inputFile + " parsed successfully.");
        if (dumpTree) {
            parser.rootNode().dump("---");
       }
    }

    static public void usage() {
        System.err.println("Usage: java ftl.FTLParser <filenames>");
    }
}

#endif

INJECT LEXER_CLASS :
{
    boolean syntaxEstablished, olderSyntax;
    boolean noWhitespaceInExpression, rightAfterHeader;
    int parenthesisNesting, bracketNesting, braceNesting;
    TokenType lastMatchedTokenType;

    Token tokenHook(Token tok) {
        if (tok.getType() == TokenType.EOF) return tok;
        if (noWhitespaceInExpression && parenthesisNesting ==0 && braceNesting==0 && tok.getPreviousToken() != null && tok.getPreviousToken().isUnparsed()) {
            if (tok.getPreviousToken().toString().trim().length() == 0) {
                Token copy = cloneToken(tok);
                tok.copyLocationInfo(tok.getPreviousToken());
                tok.setType(TokenType.BLANK);
                //tok.setNext(copy);
                noWhitespaceInExpression = false;
                lastMatchedTokenType = tok.getType();
                return tok;
            }
        }
        int firstChar = tok.toString().codePointAt(0);
        int lastChar = tok.toString().codePointAt(tok.toString().length() - 1);
        boolean hasPointyDelimiter = firstChar == '<' || lastChar == '>';
        if (rightAfterHeader) {
            // chop off the newline after a <#ftl ...> header
            rightAfterHeader = false;
            if (tok.getType() == TokenType.WHITESPACE) {
                String img = tok.toString();
                int idx = img.indexOf('\n');
                if (idx <0) idx = img.indexOf('\r');
                if (idx >=0) {
                    tok.setBeginOffset(tok.getBeginOffset()+idx);
                }
            }
        }
        switch (tok.getType()) {
             case USER_DIRECTIVE_OPEN1 :
             case USER_DIRECTIVE_OPEN2 :
             case FTL_DIRECTIVE_OPEN1 :
             case FTL_DIRECTIVE_OPEN2 :
             if (syntaxEstablished) {
                 if (hasPointyDelimiter != olderSyntax) {
                     tok.setType(TokenType.PRINTABLE_CHARS);
                 }
                 else {
                     if (tok.getType() == TokenType.FTL_DIRECTIVE_OPEN1 || tok.getType() == TokenType.FTL_DIRECTIVE_OPEN2) switchTo(LexicalState.FTL_DIRECTIVE);
                     else {
                         noWhitespaceInExpression = true;
                         switchTo(LexicalState.FTL_EXPRESSION);
                     }
                 }
             } else {
                 olderSyntax = (firstChar == '<');
                 //activeTokenTypes.remove(FTL_D)
                 syntaxEstablished = true;
             }
             break;

             case CLOSE_TAG :
             case CLOSE_EMPTY_TAG :
             if (olderSyntax != hasPointyDelimiter) tok.setType(TokenType.PRINTABLE_CHARS);
             else switchTo(LexicalState.TEMPLATE_TEXT);
             break;

             case END_DIRECTIVE1 :
             case END_DIRECTIVE2 :
               if (olderSyntax!=hasPointyDelimiter) tok.setType(TokenType.PRINTABLE_CHARS);
               else switchTo(LexicalState.TEMPLATE_TEXT);
               break;

             case END_USER_DIRECTIVE1 :
             case END_USER_DIRECTIVE2 :
                 if (hasPointyDelimiter != olderSyntax) tok.setType(TokenType.PRINTABLE_CHARS);
                 break;
             case GT :
             case GTE :
                 if (parenthesisNesting == 0 && olderSyntax) {
                     tok.setType(TokenType.CLOSE_TAG);
                     if (tok.getType() == TokenType.GTE) {
                        tok.truncate(1);
                          //tok.setImage(">");
                          //tok.setEndOffset(tok.getEndOffset()-1);
                      //bufferPosition = backup(bufferPosition,1);
                      //bufferPosition = tok.getEndOffset();
                     }
                     switchTo(LexicalState.TEMPLATE_TEXT);
                 }
                break;
             case OPEN_PAREN : parenthesisNesting++; break;
             case CLOSE_PAREN : parenthesisNesting--; break;

             case OPEN_BRACKET : bracketNesting++; break;
             case CLOSE_BRACKET :
             if (bracketNesting>0) {
                 --bracketNesting;
              } else if (!olderSyntax) {
                tok.setType(TokenType.CLOSE_TAG);
                switchTo(LexicalState.TEMPLATE_TEXT);
              }
              break;

              case OPEN_BRACE : braceNesting++; break;
              case CLOSE_BRACE : if (braceNesting>0) braceNesting--; else switchTo(LexicalState.TEMPLATE_TEXT); break;

              case END_COMMENT :
              if (hasPointyDelimiter != olderSyntax) tok.setType(TokenType.PRINTABLE_CHARS);
              else switchTo(LexicalState.TEMPLATE_TEXT);
              break;
              default :
              if (lastMatchedTokenType == TokenType.DOT && possibleIdentifier(tok.toString())) {
                  tok.setType(TokenType.IDENTIFIER);
              }
        }
        lastMatchedTokenType = tok.getType();
        return tok;
    }

    private boolean possibleIdentifier(String s) {
        int i = 0;
        int n = s.length();
        while (i < n) {
            char c = s.charAt(i);
            if (c < 'a' || c > 'z') return false;
            ++i;
        }
        return true;
    }


    private Token cloneToken(Token t) {
        Token result = Token.newToken(t.getType(), this, 0, 0);
        result.copyLocationInfo(t);
        return result;
    }
}

INCLUDE "FEL.ccc"

TOKEN :
    <FTL_DIRECTIVE_OPEN1 : "<#"> : FTL_DIRECTIVE
    |
    <FTL_DIRECTIVE_OPEN2 : "[#"> : FTL_DIRECTIVE
    |
    <USER_DIRECTIVE_OPEN1 : "<@"> : FTL_EXPRESSION
    |
    <USER_DIRECTIVE_OPEN2 : "[@"> : FTL_EXPRESSION
    |
    <INTERPOLATE : "${"> : FTL_EXPRESSION
    |
    <NUMERICAL_INTERPOLATE : "#{"> : FTL_EXPRESSION
    |
    <WHITESPACE : (["\n", "\r", "\t", " "])+>
    |
    <SPECIAL_CHAR : "$" | "<" | "[" >
    |
    <PRINTABLE_CHARS : (~["$", "<", "[", "\n", "\r", "\t", " "])+>
    |
    <END_DIRECTIVE1 : "[/#" (<IDENTIFIER>)? (<BLANK>)* "]">
    |
    <END_DIRECTIVE2 : "</#" (<IDENTIFIER>)? (<BLANK>)* ">">
    |
    <END_USER_DIRECTIVE1 : "[/@" (<IDENTIFIER>(<DOT><IDENTIFIER>)*)? (<BLANK>)* "]">
    |
    <END_USER_DIRECTIVE2 : "</@" (<IDENTIFIER>(<DOT><IDENTIFIER>)*)? (<BLANK>)* ">">
;

<FTL_DIRECTIVE> TOKEN :
    <TRIM : "t">
    |
    <COMMENT : "--"> : IN_COMMENT
    |
    <LTRIM : "lt">
    |
    <RTRIM : "rt">
    |
    <NOTRIM : "nt">
    |
    <IF : "if">
    |
    <FTL : "ftl">
    |
    <SET : "set">
    |
    <VAR : "var">
    |
    <LIST : "list">
    |
    <ELSE : "else">
    |
    <STOP : "stop">
    |
    <CASE : "case">
    |
    <MACRO : "macro">
    |
    <LOCAL : "local">
    |
    <FLUSH : "flush">
    |
    <BREAK : "break">
    |
    <EMBED : "embed">
    |
    <NESTED : "nested">
    |
    <VISIT : "visit">
    |
    <SWITCH : "switch">
    |
    <IMPORT : "import">
    |
    <DEFAUL : "default">
    |
    <RETURN : "return">
    |
    <GLOBAL : "global">
    |
    <ASSIGN : "assign">
    |
    <ELSEIF : "elseif">
    |
    <ESCAPE : "escape">
    |
    <RECURSE : "recurse">
    |
    <FUNCTION : "function">
    |
    <FALLBACK : "fallback">
    |
    <NOESCAPE : "noescape">
    |
    <SETTING : "setting">
    |
    <NOPARSE : "noparse">
    |
    <_INCLUDE : "include">
    |
    <_ATTEMPT : "attempt">
    |
    <FOREACH : "foreach">
    |
    <_RECOVER : "recover">
    |
    <COMPRESS : "compress">
    |
    <BLOCKTRIM : "t_lines">
    |
    <BLOCKTRIML : "lt_lines">
    |
    <BLOCKTRIMR : "rt_lines">
    |
    <BLOCKNOTRIM : "nt_lines">
    |
    <BLANK : "\n" | "\r" | "\t" | " "> : FTL_EXPRESSION
    |
    <CLOSE_TAG : (<BLANK>)* (">" | "]") > : TEMPLATE_TEXT
;

<FTL_DIRECTIVE, FTL_EXPRESSION> TOKEN :
    <CLOSE_EMPTY_TAG : (<BLANK>)* "/" (">"|"]")> : TEMPLATE_TEXT
;

<IN_COMMENT> MORE:
    < ~[]>
;

<IN_COMMENT> TOKEN:
    <END_COMMENT : "-->" | "--]">
;

<NO_PARSE> MORE :  <(~[])> ;

<NO_PARSE> TOKEN :
    <NOPARSE_END : ("</#noparse" (<BLANK>)* ">") | ("[/#noparse" (<BLANK>)* "]")> : TEMPLATE_TEXT
;

IdentifierOrStringLiteral :
    <IDENTIFIER>
    |
    StringLiteral
;


Interpolation :
    <INTERPOLATE>Expression<CLOSE_BRACE>
;

NumericalInterpolation :
    <NUMERICAL_INTERPOLATE>Expression [<SEMICOLON><IDENTIFIER>]<CLOSE_BRACE>
;


Assignment :
{
    Token t;
}
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    (
       t=<SET>|
       t=<ASSIGN>|
       t=<LOCAL>|
       t=<GLOBAL>
    )
    <BLANK>
    IdentifierOrStringLiteral
    (
      (
       <EQUALS>Expression
       ([<COMMA>] IdentifierOrStringLiteral <EQUALS> Expression)*
       [<IN> Expression]
       LooseTagEnd
      )
      |
      (
          [<IN> Expression]
         <CLOSE_TAG>
         Block
         DirectiveEnd(t.toString())
      )
    )
;

Var #VarInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <VAR><BLANK>
    IdentifierOrStringLiteral [<EQUALS> Expression]
    ([<COMMA>]IdentifierOrStringLiteral [<EQUALS> Expression])*
    LooseTagEnd
;

Setting #SettingInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <SETTING><BLANK>
    <IDENTIFIER> [<EQUALS> Expression]
    ([<COMMA>]IdentifierOrStringLiteral [<EQUALS> Expression])*
    LooseTagEnd
;

Attempt #AttemptRecover :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <_ATTEMPT><CLOSE_TAG>
    Block
    Recover
;

Comment #CommentBlock :
   (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
   <COMMENT>
   <END_COMMENT>
;

NoParse #NoParseBlock :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <NOPARSE>
    <CLOSE_TAG>{token_source.switchTo(LexicalState.NO_PARSE);}
    <NOPARSE_END>
;

Trim #TrimInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <TRIM>
    LooseTagEnd
;

NoTrim #TrimInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <NOTRIM>
    LooseTagEnd
;


RightTrim #TrimInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <RTRIM>
    LooseTagEnd
;


LeftTrim #TrimInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <LTRIM>
    LooseTagEnd
;

Break #BreakInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <BREAK>
    LooseTagEnd
;

Flush #FlushInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <FLUSH>LooseTagEnd
;

Return #ReturnInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <RETURN>
    [<BLANK>Expression]
    LooseTagEnd
;

Stop #StopInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <STOP>
    [<BLANK>Expression]
    LooseTagEnd
;


Compress #CompressBlock :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <COMPRESS><CLOSE_TAG>
    Block
    DirectiveEnd("compress")
;

TrimBlock :
{
   String closeTag;
}
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    (
        <BLOCKTRIM> {closeTag = "t_lines";}
        |
        <BLOCKTRIML> {closeTag = "lt_lines";}
        |
        <BLOCKTRIMR> {closeTag = "rt_lines";}
        |
        <BLOCKNOTRIM> {closeTag = "nt_lines";}
    )
    <CLOSE_TAG>
    Block
    DirectiveEnd(closeTag)
;

NoEscapeBlock :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <NOESCAPE><CLOSE_TAG>
    Block
    DirectiveEnd("noescape")
;

EscapeBlock :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <ESCAPE>
    <BLANK>
    <IDENTIFIER>
    <AS>
    Expression
    <CLOSE_TAG>
    Block
    DirectiveEnd("escape")
;

Include #IncludeInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <_INCLUDE><BLANK>
    Expression
    [<SEMICOLON>]
    (<IDENTIFIER><EQUALS>Expression)*
    LooseTagEnd
;

Embed #EmbedInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <EMBED><BLANK>
    Expression
    LooseTagEnd
;

Import #ImportInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <IMPORT><BLANK>
    Expression
    <AS>
    <IDENTIFIER>
    LooseTagEnd
;

Visit #VisitInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <VISIT>
    <BLANK>
    Expression
    [
       <USING>
       Expression
       (
           [<COMMA>]
           Expression
       )*
    ]
    LooseTagEnd
;

Recurse #RecurseInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <RECURSE>
    (
       LooseTagEnd
       |
       (
          <BLANK>
          [Expression]
          [<USING>
            Expression
            ([<COMMA>] Expression)*
          ]
          LooseTagEnd
       )
    )
;

FallBack #FallBackInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <FALLBACK>
    LooseTagEnd
;

If #IfStatement :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <IF><BLANK>
    Expression
    <CLOSE_TAG>
    Block
    ( ElseIf )*
    [
       Else
    ]
    DirectiveEnd("if")
;

ElseIf #ElseIfBlock :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <ELSEIF>
    =>||
    <BLANK>
    Expression
    <CLOSE_TAG>
    Block
;

Else #ElseBlock :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <ELSE>
    =>||
    <CLOSE_TAG>
    Block
;

Switch #SwitchInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <SWITCH> =>||
    <BLANK>
    Expression
    <CLOSE_TAG>
    [<WHITESPACE>]
    (Case)*
    [
     SCAN 2 Default
    ]
    DirectiveEnd("switch")
;

Case #CaseInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <CASE>
    =>||
    <BLANK>
    Expression <CLOSE_TAG> Block
;

Default #DefaultInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <DEFAUL><CLOSE_TAG>
    Block
;

List #ListInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <LIST><BLANK>
    Expression
    <AS>
    <IDENTIFIER>
    <CLOSE_TAG>
    Block
    DirectiveEnd("list")
;

ForEach #ForEachInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <FOREACH><BLANK>
    <IDENTIFIER>
    <IN>
    Expression
    <CLOSE_TAG>
    Block
    DirectiveEnd("foreach")
;

Nested #NestedInstruction :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <NESTED>
    [<BLANK>PositionalArgsList]
    LooseTagEnd
;

MacroDefinition :
{
    Token t;
}
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    (
      t=<MACRO>
      |
      t=<FUNCTION>
    )
    <BLANK>
    IdentifierOrStringLiteral
    [<OPEN_PAREN>]
    [ParameterList]
    [<CLOSE_PAREN>]
    <CLOSE_TAG>
    Block
    DirectiveEnd(t.toString())
;

ParameterList :
// Of course, the params with default values must come after
// the ones without and the ellipsis can only occur on the
// end, but we can check for this at a later stage.
    <IDENTIFIER>
    [(<EQUALS>Expression) | <ELLIPSIS>]
    (
       [<COMMA>]
       <IDENTIFIER>
       [
          (<EQUALS>Expression)
          |
          <ELLIPSIS>
       ]
    )*
;


LooseTagEnd :
    <CLOSE_TAG>
    |
    <CLOSE_EMPTY_TAG>
;

DirectiveEnd(String name) :
    <END_DIRECTIVE1>|<END_DIRECTIVE2>
    {
        String tag = lastConsumedToken.toString();
        tag=tag.substring(3);
        tag=tag.substring(0, tag.length() -1).trim();
        if (tag.length() !=0 && !name.equals(tag)) {
            throw new ParseException("Expecting closing tag for " + name);
        }
    }
;

Text :
{
    Token t;
}
    (
      (t=<PRINTABLE_CHARS>|
       t=<WHITESPACE>|
       t=<SPECIAL_CHAR>)
    )+
;

Recover #RecoverBlock :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <_RECOVER><CLOSE_TAG>
    Block
    DirectiveEnd("attempt")
;

TopLevelDirective #void :
   (
     SCAN 2 Assignment |
     SCAN 2 Attempt |
     SCAN 2 Comment |
     SCAN 2 Compress |
     SCAN 2 Embed |
     SCAN 2 ForEach |
     SCAN 2 If |
     SCAN 2 List |
     SCAN 2 Include |
     SCAN 2 Import |
     SCAN 2 MacroDefinition |
     SCAN 2 NoParse |
     Switch |
     SCAN 2 Setting |
     SCAN 2 Var|
     SCAN 2 Break |
     SCAN 2 Return |
     SCAN 2 Stop |
     SCAN 2 Flush |
     SCAN 2 Trim |
     SCAN 2 NoTrim |
     SCAN 2 LeftTrim |
     SCAN 2 RightTrim|
     SCAN 2 TrimBlock |
     SCAN 2 Nested |
     SCAN 2 EscapeBlock |
     SCAN 2 NoEscapeBlock |
     SCAN 2 Visit |
     SCAN 2 Recurse |
     SCAN 2 FallBack
   )
;

UserDirective :
{
    Token startToken;
    this.token_source.noWhitespaceInExpression = true;
}
    (
        startToken=<USER_DIRECTIVE_OPEN1>
        |
        startToken=<USER_DIRECTIVE_OPEN2>
    )
    Expression
    {this.token_source.noWhitespaceInExpression = false;}
    [<BLANK>]
    [ArgsList]
    [<SEMICOLON>[ParameterList]]
    (
       <CLOSE_EMPTY_TAG>
       |
       (
          <CLOSE_TAG>
          Block
          (<END_USER_DIRECTIVE1>|<END_USER_DIRECTIVE2>)
       )
    )
;

Block :
  (
    SCAN 2
    (
     Text
     |
     Interpolation
     |
     NumericalInterpolation
     |
     UserDirective
     |
     TopLevelDirective
    )
  )*
;

FTLHeader :
    (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
    <FTL>
    [
       <BLANK>
       (
          <IDENTIFIER>
          <EQUALS>
          Expression
       )*
    ]
    (<CLOSE_TAG> |<CLOSE_EMPTY_TAG>)
;



Root :
    [
        SCAN [<WHITESPACE>]
        (<FTL_DIRECTIVE_OPEN1>|<FTL_DIRECTIVE_OPEN2>)
        <FTL> =>
        [<WHITESPACE>]
        FTLHeader {token_source.rightAfterHeader = true;}
    ]
    Block
    <EOF>
;
