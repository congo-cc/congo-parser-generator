/*
 * This Python grammar corresponds to the information on the
 * following two web pages:
 * https://docs.python.org/3/reference/grammar.html
 * https://docs.python.org/3/reference/lexical_analysis.html#indentation
 * This is Python 3.10.0, which is the latest spec at this moment.
 * (I do not anticipate supporting any older versions of the language.)
 * Currently, the generated parser can parse the source code of Django
 * and the Python standard library, with the exception of a few files
 * that are deliberately screwy.
 */

PARSER_PACKAGE = org.parsers.python;
DEFAULT_LEXICAL_STATE = PYTHON;
ENSURE_FINAL_EOL;
DEACTIVATE_TOKENS=MATCH,CASE;
#if FT
FAULT_TOLERANT;
FAULT_TOLERANT_DEFAULT=false;
#endif

INCLUDE "PythonLexer.ccc"

#Module :
   (Statement)*!
   <EOF>
   {return CURRENT_NODE;}
;

Number#void :
  <HEXNUMBER> | <BINNUMBER> | <OCTNUMBER> | <DECNUMBER> | <FLOAT> | <COMPLEX>
;

SignedNumber :
  [<MINUS>]
  Number
  [(<PLUS>|<MINUS>) <COMPLEX>]
;

Strings : (<STRING_LITERAL> | FString)+ ;

AtomicExpression#void :
    <NAME>
    |
    Number
    |
    Strings
    |
    <TRUE>
    |
    <FALSE>
    |
    <NONE>
    |
    <PEG_PARSER>
    |
    (Tuple | GenExp | Group)
    |
    (ListComp | List)
    |
    (SetComp | DictComp | Dict | Set)
    |
    <ELLIPSIS>
;

Slice :
    [Expression] <COLON> =>|| [Expression] [<COLON> [Expression]]
    |
    [<NAME> <COLONEQUALS> =>||] Expression
;

Slices : <LBRACKET> Slice (<COMMA> =>|+1 Slice)* [<COMMA>] <RBRACKET> ;

Statement :
   MatchStatement
   |
   SimpleStatement
   |
   CompoundStatement
;

SimpleStatement#(>2) : SmallStatement (<SEMICOLON> =>|+1 SmallStatement)* [<SEMICOLON>] <NEWLINE> ;

SmallStatement :
   Assignment
   |
   StarExpressions
   |
   ReturnStatement
   |
   ImportStatement
   |
   GlobalStatement
   |
   NonlocalStatement
   |
   <BREAK>
   |
   <CONTINUE>
   |
   <PASS>
   |
   DelStatement
   |
   AssertStatement
   |
   RaiseStatement
   |
   YieldStatement
;

CompoundStatement :
    FunctionDefinition
    |
    IfStatement
    |
    ClassDefinition
    |
    WithStatement
    |
    WhileStatement
    |
    ForStatement
    |
    TryStatement
;

ReturnStatement : <RETURN> [StarExpressions] ;

GlobalStatement : <GLOBAL> <NAME> (<COMMA> <NAME>)* ;

NonlocalStatement : <NONLOCAL> <NAME> (<COMMA> <NAME>)* ;

AssertStatement : <_ASSERT> Expression (<COMMA> Expression)* ;

RaiseStatement : <RAISE> [ Expression [<FROM> Expression ] ];

Block :
    SimpleStatement
    |
    <NEWLINE><INDENT>(Statement)+<DEDENT>
;

ElseBlock : <ELSE> <COLON> Block ;

ExceptBlock : <EXCEPT> [ [<STAR>] Expression [<AS> <NAME>] ] <COLON> Block ;

IfStatement :
    <IF> NamedExpression <COLON> Block
     (<ELIF> NamedExpression <COLON> Block)*
     [<ELSE> <COLON> Block]
;

FinallyBlock : <FINALLY> <COLON> Block ;

WhileStatement : <WHILE> NamedExpression <COLON> Block [ElseBlock] ;

WithStatement :
    [<ASYNC>] <WITH> =>||
    (
        SCAN WithItemsInParentheses <COLON> => WithItemsInParentheses
        |
        WithItem (<COMMA> WithItem)*
    )
    <COLON> Block
;

WithItemsInParentheses#void : <LPAREN> WithItem (SCAN 2 <COMMA> WithItem)* [<COMMA>] <RPAREN> ;

WithItem : Expression [<AS> StarTarget] ;

ForStatement :
   [<ASYNC>] <FOR> =>||
   StarTargets <IN> StarExpressions <COLON>
   Block [ElseBlock]
;

TryStatement :
   <TRY> <COLON> Block
   (
       FinallyBlock
       |
       ((ExceptBlock)+ [ElseBlock] [FinallyBlock])
   )
;

DelStatement : <DEL> PrimaryExpression (SCAN 2 <COMMA> PrimaryExpression)* [<COMMA>] ;

NamedExpression : [ <NAME> <COLONEQUALS> =>||] Expression ;

DottedName : <NAME> (<DOT> <NAME> =>||)* ;

ImportStatement : ImportName | ImportFrom1 | ImportFrom2 ;

ImportName#void : <IMPORT> DottedName [<AS> <NAME>] (<COMMA> DottedName [<AS> <NAME>])* ;

ImportFrom1#void : <FROM> (<DOT> | <ELLIPSIS>)* DottedName =>|| <IMPORT>  ImportFromTargets ;

ImportFrom2#void : <FROM> (<DOT> | <ELLIPSIS>)+ <IMPORT> =>|| ImportFromTargets ;

ImportFromTargets :
   <STAR>
   |
   <NAME> [<AS> <NAME>] (<COMMA> <NAME> =>|| [<AS> <NAME>])* [<COMMA>]
   |
   <LPAREN> <NAME> [<AS> <NAME>] (<COMMA> <NAME> =>|| [<AS> <NAME>])* [<COMMA>] <RPAREN> [<LPAREN>]
;

StarNamedExpression :
     <STAR> BitwiseOr
     |
     NamedExpression
;

StarExpression :
    <STAR> BitwiseOr
    |
    Expression
;

StarExpressions : StarExpression (<COMMA> =>|+1 StarExpression)* [<COMMA>] ;

StarNamedExpressions : StarNamedExpression (<COMMA> =>|+1 StarNamedExpression)* [<COMMA>] ;

BitwiseOr : BitwiseXor (<BIT_OR> BitwiseXor)* ;

BitwiseXor : BitwiseAnd (<XOR> BitwiseAnd)* ;

BitwiseAnd : ShiftExpression (<BIT_AND> ShiftExpression)* ;

ShiftExpression : AdditiveExpression ((<LSHIFT> | <RSHIFT>) AdditiveExpression)* ;

AdditiveExpression : MultiplicativeExpression ((<PLUS>|<MINUS>) MultiplicativeExpression)* ;

MultiplicativeExpression : UnaryExpression ((<STAR>|<SLASH>|<SLASHSLASH>|<PERCENT>|<AT>) UnaryExpression)* ;

UnaryExpression : Power | (<PLUS> | <MINUS> | <TILDE>) UnaryExpression ;

Power : AwaitPrimary [<STAR_STAR> UnaryExpression] ;

Tuple :
   SCAN <LPAREN> (<RPAREN> | StarNamedExpression <COMMA>) =>
   <LPAREN> [StarNamedExpression <COMMA> [StarNamedExpressions]] <RPAREN>
;

Group : <LPAREN> (YieldExpression | NamedExpression) <RPAREN> ;

AwaitPrimary : [<AWAIT>] PrimaryExpression ;

PrimaryExpression#void :
   AtomicExpression
   (
       <DOT> <NAME> #DotName(3)
       |
       Slices #SliceExpression(2)
       |
       GenExp #GenExpression(2)
       |
       InvocationArguments #FunctionCall(2)
   )*
;

YieldExpression :
    <YIELD> <FROM> =>|| Expression
    |
    <YIELD> [StarExpressions]
;

YieldStatement# : YieldExpression ;

AnnotatedRhs : YieldExpression | StarExpressions ;

Decorators : (<AT> NamedExpression <NEWLINE>)+ ;

Annotation : <COLON> Expression ;

InvocationArguments :
   <LPAREN>
   [
      Argument(false, false)
      {
      // Variables to keep track of what we have seen,
      // and thus, what is permissible. These are
      // defined locally so only apply when parsing, not
      // scanning ahead, so the lookahead is looser
      // than the parsing.
         boolean seenEquals = peekNode().firstChildOfType(TokenType.ASSIGN) != null;
         boolean seenDoubleStar = peekNode().firstChildOfType(TokenType.STAR_STAR) != null;
      }
      (
         SCAN 3
         <COMMA>
         Argument(seenEquals, seenDoubleStar)
         {
            seenEquals |= peekNode().firstChildOfType(TokenType.ASSIGN) != null;
            seenDoubleStar |= peekNode().firstChildOfType(TokenType.STAR_STAR) != null;
         }
      )*
      [<COMMA>]
   ]
   <RPAREN>
;

Argument(boolean seenEquals, boolean seenDoubleStar) :
   <NAME>
   (
      SCAN 1 {!seenEquals} =>
      <COLONEQUALS>
      |
      <ASSIGN>
   )
   =>||
   Expression
   |
   [
      SCAN 1 {!seenDoubleStar} => <STAR>
      |
      <STAR_STAR>
   ]
   Expression
;

KeyValuePair : Expression <COLON> Expression ;

DoubleStarredKeyValuePair :
    <STAR_STAR> BitwiseOr
    |
    KeyValuePair
;

DoubleStarredKeyValuePairs : DoubleStarredKeyValuePair (<COMMA> =>|+1 DoubleStarredKeyValuePair)* [<COMMA>] ;

Dict :
  SCAN <LBRACE> (<RBRACE> | DoubleStarredKeyValuePair) =>
  (
    <LBRACE>
    [DoubleStarredKeyValuePairs]
    <RBRACE>
  )
;

DictComp : <LBRACE> KeyValuePair =>|+2 (ForIfClause)+ <RBRACE> ;

Set : <LBRACE> StarNamedExpressions <RBRACE> ;

SetComp : <LBRACE> NamedExpression =>|+2 (ForIfClause)+ <RBRACE> ;

ClassDefinition :
    [Decorators] <CLASS> =>||
    <NAME> [InvocationArguments]
    <COLON>
    Block
;

FunctionDefinition :
    [Decorators]
    [<ASYNC>]
    <DEF> =>||
    <NAME>
    <LPAREN>
    Parameters
    <RPAREN>
    [<RARROW> Expression]
    <COLON> Block
;

LambdaDefinition : <LAMBDA> Parameters <COLON> Expression ;

/*
 * Expression grammar follows
 */

Expression : Disjunction [<IF> Disjunction <ELSE> Expression] | LambdaDefinition ;

Disjunction : Conjunction (<OR> Conjunction)* ;

Conjunction : Inversion (<AND> Inversion)* ;

Inversion : (<NOT>)* Comparison ;

Comparison : BitwiseOr (ComparisonOperator BitwiseOr)* ;

ComparisonOperator#void :
   <LT> | <GT> | <EQ> | <GE> | <LE> | <NE>
   |
   [<NOT>] <IN>
   |
   <IS> [<NOT>]
;

StarTarget : [<STAR>] PrimaryExpression ;

StarTargets : StarTarget (<COMMA> =>|+1 StarTarget)* [<COMMA>];

ForIfClause : [<ASYNC>] <FOR> StarTargets <IN> Disjunction (<IF> Disjunction)* ;

GenExp : <LPAREN> NamedExpression =>|+2 (ForIfClause)+ <RPAREN> ;

List : <LBRACKET> [StarNamedExpressions] <RBRACKET> ;

ListComp : <LBRACKET> NamedExpression =>|+2 (ForIfClause)+ <RBRACKET> ;

StarEtc :
   KeyWords
   |
   <STAR> <COMMA> =>|| ParamMaybeDefault (<COMMA> =>|+1 ParamMaybeDefault)* [<COMMA> [KeyWords]]
   |
   <STAR> <NAME> [SCAN 1 \.\FunctionDefinition => <COLON> Expression] (<COMMA> =>|+1 ParamMaybeDefault)* [<COMMA> [KeyWords]]
;

ParamMaybeDefault : <NAME> [<COLON> Expression] [<ASSIGN> Expression] ;

KeyWords :
   <STAR_STAR> <NAME>
   [
       SCAN 1 ~\...\LambdaDefinition =>
       <COLON> Expression
   ]
;

Parameters :
    {boolean seenDefault = false, seenSlash=false;}
    [
      <NAME>
// Using a contextual predicate, we manage to use the same production
// for the parameters of a function def or a lambda.
      [SCAN 1 \FunctionDefinition => <COLON> Expression]
      [<ASSIGN> Expression {seenDefault = true;}]
      (<COMMA> =>|+1
        (
          // Slash can only occur once.
          SCAN 1 {!seenSlash} =>
          <SLASH> {seenSlash = true;}
          |
          <NAME> [SCAN 1 \FunctionDefinition => <COLON> Expression]
          [
             // If we've already seen a param with a default value,
             // the remaining ones also have to have a default value.
             SCAN 0 {seenDefault || getToken(1).getType() == TokenType.ASSIGN}
             => <ASSIGN> Expression {seenDefault = true;}
          ]
        )
      )*
      [ <COMMA> ]
    ]
    [
      SCAN ~(<RPAREN>|<COLON>) => StarEtc
    ]
    [<COMMA>]
;

AugAssign#void :
    <PLUSASSIGN> | <MINUSASSIGN> | <STARASSIGN> | <ATASSIGN> | <SLASHASSIGN>
    | <REMASSIGN> | <ANDASSIGN> | <ORASSIGN> | <XORASSIGN> | <LSHIFTASSIGN>
    | <RSHIFTASSIGN> | <STARSTARASSIGN> | <SLASHSLASHASSIGN>
;

SimpleAssignTarget :
   PrimaryExpression
   |
   <LPAREN> SimpleAssignTarget <RPAREN>
;

Assignment :
 SCAN SimpleAssignTarget (<COLON> | AugAssign) =>|| | StarTargets <ASSIGN> =>
 (
  SimpleAssignTarget <COLON> =>|| Expression [<ASSIGN> AnnotatedRhs]
  |
  SimpleAssignTarget AugAssign =>|| (YieldExpression | StarExpressions)
  |
  (StarTargets <ASSIGN> =>||)+ (YieldExpression | StarExpressions)
 )
;

// Below this point is the new pattern matching stuff
// introduced in Python 3.10

MatchStatementLA#scan :
   <MATCH>
   |
   <NAME>
   ASSERT {getToken(0).toString().equals("match")}
   SubjectExpression
   <COLON>
;

MatchStatement :
  SCAN MatchStatementLA =>
   ACTIVATE_TOKENS MATCH (<MATCH>)
   SubjectExpression
   <COLON>
   <NEWLINE>
   <INDENT>
   ACTIVATE_TOKENS CASE (CaseBlock)+
   <DEDENT>
;

CaseBlock :
    <CASE>
    DEACTIVATE_TOKENS CASE
    (
      Patterns
      [<IF> NamedExpression]
      <COLON>
      Block
    )
;


Patterns :
   OpenSequencePattern
   |
   Pattern
;

StarPattern :
   <STAR> <NAME>
;

MaybeStarPattern#void : StarPattern | Pattern ;

ClosedPattern :
   ClassPattern
   |
   LiteralPattern
   |
   NameOrAttribute
   |
   GroupPattern =>||
   |
   SequencePattern
   |
   MappingPattern
;

GroupPattern : <LPAREN> Pattern <RPAREN> ;

KeyValuePattern: (LiteralPattern | Attribute) <COLON> Pattern ;

ItemsPattern : KeyValuePattern (<COMMA> =>|+1 KeyValuePattern)* ;

MappingPattern :
  <LBRACE>
     [
         ItemsPattern [<COMMA> =>|+1 DoubleStarPattern] [<COMMA>]
         |
         DoubleStarPattern [<COMMA>]
     ]
  <RBRACE>
;

DoubleStarPattern : <STAR_STAR> <NAME> ;

LiteralPattern :
   <NONE>
   |
   <TRUE>
   |
   <FALSE>
   |
   SignedNumber
   |
   Strings
;

MaybeSequencePattern :
   MaybeStarPattern (<COMMA> =>|+1 MaybeStarPattern)* [<COMMA>]
;

OpenSequencePattern :
   MaybeStarPattern <COMMA> =>|| [MaybeSequencePattern]
;

SequencePattern :
    <LBRACKET> [MaybeSequencePattern] <RBRACKET>
    |
    <LPAREN> [OpenSequencePattern] <RPAREN>
;

ClassPattern :
   NameOrAttribute
   <LPAREN>
   =>||
      [
          SCAN <NAME> <ASSIGN> =>
          KeywordPatterns [<COMMA>]
          |
          PositionalPatterns [<COMMA> =>|+1 KeywordPatterns] [<COMMA>]
      ]
   <RPAREN>
;

PositionalPatterns :
   Pattern
   (
       // If the next three tokens are a comma, identifier, and =, we need to end this
       // production and go into KeywordPatterns. This has a bit of a kludgy feel to it.
       SCAN 0 {getToken(1).getType() == TokenType.COMMA && !( getToken(2).getType() == TokenType.NAME && getToken(3).getType() == TokenType.ASSIGN)}#
       => <COMMA> Pattern
   )*
;

KeywordPattern : <NAME> <ASSIGN> Pattern ;

KeywordPatterns : KeywordPattern (<COMMA> =>|+2 KeywordPattern)* ;

OrPattern : ClosedPattern (<BIT_OR> ClosedPattern)* ;

Pattern : OrPattern [<AS> <NAME>] ;

SubjectExpression :
   StarNamedExpression <COMMA> =>|| [StarNamedExpressions]
   |
   NamedExpression
;

Attribute : <NAME> (<DOT> <NAME>)+ ;

NameOrAttribute #Attribute(>1) : <NAME> (<DOT> <NAME>)* ;

/*
// Below this the formalized F-String grammar, part of Python 3.12
INJECT PARSER_CLASS :
{
   private boolean isRawStart(BASE_TOKEN_CLASS t) {
      return t.charAt(0) == 'r' || t.charAt(0) == 'R' || t.charAt(1) == 'r' || t.charAt(1) == 'R';
   }
}
*/

DoubleQuoteFString :
   <FSTRING_DOUBLE_QUOTE_START>
   LEXICAL_STATE IN_DOUBLE_QUOTE_FSTRING
   (
       (
         <TEXT_IN_DOUBLE_QUOTE_FSTRING>
         |
         PlaceHolder
       )*
       <DOUBLE_QUOTE>
   )
;

SingleQuoteFString :
   <FSTRING_SINGLE_QUOTE_START>
   LEXICAL_STATE IN_SINGLE_QUOTE_FSTRING
   (
       (
         <TEXT_IN_SINGLE_QUOTE_FSTRING>
         |
         PlaceHolder
       )*
       <SINGLE_QUOTE>
   )
;

LongDoubleQuoteFString :
   <FSTRING_LONG_DOUBLE_QUOTE_START>
   LEXICAL_STATE IN_LONG_DOUBLE_QUOTE_FSTRING
   (
       (
         <TEXT_IN_LONG_DOUBLE_QUOTE_FSTRING>
         |
         PlaceHolder
       )*
       <LONG_DOUBLE_QUOTE>
   )
;

LongSingleQuoteFString :
   <FSTRING_LONG_SINGLE_QUOTE_START>
   LEXICAL_STATE IN_LONG_SINGLE_QUOTE_FSTRING
   (
       (
         <TEXT_IN_LONG_SINGLE_QUOTE_FSTRING>
         |
         PlaceHolder
       )*
       <LONG_SINGLE_QUOTE>
   )
;

FString :
   {
      String start = getToken(1).toString();
      char firstChar = start.charAt(0);
      char secondChar = start.charAt(1);
      boolean isRaw = firstChar == 'r' || firstChar == 'R' || secondChar == 'r' || secondChar == 'R';
   }
   SCAN 0 {isRaw} =>
   ACTIVATE_TOKENS BACKSLASH_LBRACE
   (
      DoubleQuoteFString
      |
      SingleQuoteFString
      |
      LongDoubleQuoteFString
      |
      LongSingleQuoteFString
   )
   |
   DEACTIVATE_TOKENS BACKSLASH_LBRACE
   (
      DoubleQuoteFString
      |
      SingleQuoteFString
      |
      LongDoubleQuoteFString
      |
      LongSingleQuoteFString
   )
;

PlaceHolder :
   (<START_EXP> | <BACKSLASH_LBRACE>)
   LEXICAL_STATE PYTHON (Expression)
   (
      <TEXT_IN_DOUBLE_QUOTE_FSTRING>
      |
      <TEXT_IN_SINGLE_QUOTE_FSTRING>
      |
      <TEXT_IN_LONG_DOUBLE_QUOTE_FSTRING>
      |
      <TEXT_IN_LONG_SINGLE_QUOTE_FSTRING>
      |
      NestedPlaceHolder
   )*
   <END_EXP>
;


NestedPlaceHolder : IN_NESTED_PLACEHOLDER :
   (<START_EXP> | <BACKSLASH_LBRACE>)
   LEXICAL_STATE PYTHON
   (
      Expression
   )
   (
      <TEXT_IN_NESTED_PLACE_HOLDER>
      |
      NestedPlaceHolder
   )*
   <END_EXP>
;
