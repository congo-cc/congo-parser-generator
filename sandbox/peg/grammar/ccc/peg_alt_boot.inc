/* Generated by: PONGO (Peg -> cONGOcc) Parser Generator. Do not edit. */
Grammar     : 
    Spacing  ( ( Definition ) =>|| )+ EndOfFile
 
; 
Definition  : 
    Identifier  ( LEFTARROW   =>|| | COLON  =>|| ) Expression  ( ( ";" Spacing ) =>|| )? 
; 
Expression  : 
    Sequence  ( ( ( SLASH   =>|| | BAR  =>|| ) Sequence ) =>|| )* 
; 
Sequence    : 
    ( ( Prefix  ( ( Entails ) =>|| )? ) =>|| )* 
; 
Prefix      : 
    ( ( Cardinality   =>|| | ( AND   =>|| | NOT  =>|| )  =>|| ) =>|| )? Suffix
 
; 
Suffix      : 
    Primary  ( ( QUESTION   =>|| | STAR   =>|| | PLUS  =>|| ) =>|| )? 
; 
Primary     : 
    Identifier  ENSURE ~( ( LEFTARROW   =>|| | COLON  =>|| ) )  =>|| | OPEN  Expression  CLOSE
               =>|| | Literal   =>|| | _Class   =>|| | DOT
             
/*******************
** Lexical Syntax **
********************/
    
  =>|| 
; 
Identifier  : 
    ( IdentStart  ( IdentCont =>|| )*  =>|| | "<" Identifier  ">"  =>|| ) Spacing
 
; 
IdentStart  : 
    LEXICAL_STATE CLASS_0_STATE (<CLASS_0>) 
; 
IdentCont   : 
    IdentStart   =>|| | LEXICAL_STATE CLASS_1_STATE (<CLASS_1>)  =>|| 
; 
Literal     : 
    "'" ( ( ENSURE ~( "'" ) Char ) =>|| )* "'" Spacing 
               =>|| | "\"" ( ( ENSURE ~( "\"" ) Char ) =>|| )* "\"" Spacing 
  =>|| 
; 
_Class       : 
    "[" ( ( ENSURE ~( "]" ) Range  ) =>|| )* "]" Spacing
 
; 
Range       : 
    Char  "-" Char   =>|| | Char
  =>|| 
; 
Char        : 
    "\\" LEXICAL_STATE CLASS_2_STATE (<CLASS_2>)  =>|| | "\\" LEXICAL_STATE CLASS_3_STATE (<CLASS_3>) LEXICAL_STATE CLASS_4_STATE (<CLASS_4>) LEXICAL_STATE CLASS_4_STATE (<CLASS_4>) LEXICAL_STATE CLASS_4_STATE (<CLASS_4>) LEXICAL_STATE CLASS_4_STATE (<CLASS_4>)  =>|| | "\\" LEXICAL_STATE CLASS_5_STATE (<CLASS_5>) LEXICAL_STATE CLASS_6_STATE (<CLASS_6>) LEXICAL_STATE CLASS_6_STATE (<CLASS_6>)  =>|| | "\\" LEXICAL_STATE CLASS_6_STATE (<CLASS_6>) ( LEXICAL_STATE CLASS_6_STATE (<CLASS_6>) =>|| )?  =>|| | ENSURE ~( "\\" ) LEXICAL_STATE ANY (<ANY_CHAR>)  =>|| 
; 
LEFTARROW   : 
    "<-" Spacing
 
; 
COLON       : 
    ":" Spacing
 
; 
SLASH       : 
    "/" Spacing
 
; 
BAR         : 
    "|" Spacing
 
; 
AND         : 
    "&" Spacing
 
; 
NOT         : 
    "!" Spacing
 
; 
QUESTION    : 
    "?" Spacing
 
; 
STAR        : 
    "*" Spacing
 
; 
PLUS        : 
    "+" Spacing
 
; 
OPEN        : 
    "(" Spacing
 
; 
CLOSE       : 
    ")" Spacing
 
; 
DOT         : 
    "." Spacing
 
; 
HASH        : 
    "#" Spacing
 
; 
NESTED_GT   : 
    "â«¸" Spacing
 
; 
TRIPLE_GT   : 
    ">>>" Spacing

 
; 
Spacing     : 
    ( ( Space   =>|| | Comment   =>|| ) =>|| )* 
; 
Comment     : 
    <SINGLE_LINE_COMMENT>   =>|| | <MULTI_LINE_COMMENT>   =>|| | LegacyComment
  =>|| 
; 
LegacyComment  : 
    ENSURE ~( Cardinality  ) ( HASH  ( ( ENSURE ~( EndOfLine  ) LEXICAL_STATE ANY (<ANY_CHAR>) ) =>|| )* EndOfLine ) 
; 
Space       : 
    " "  =>|| | "\t"  =>|| | EndOfLine
  =>|| 
; 
EndOfLine   : 
    "\r\n"  =>|| | "\n"  =>|| | "\r"  =>|| 
; 
EndOfFile   : 
    ENSURE ~( LEXICAL_STATE ANY (<ANY_CHAR>) ) 
; 
Cardinality    : 
    HASH  ( ( NaturalNumber  ( ( COLON  ( NaturalNumber =>|| )? HASH ) =>|| )? ) =>|| )? 
; 
NaturalNumber  : 
    "0"  =>|| | LEXICAL_STATE CLASS_7_STATE (<CLASS_7>) ( LEXICAL_STATE CLASS_1_STATE (<CLASS_1>) =>|| )* Spacing
  =>|| 
; 
Entails        : 
    ( TRIPLE_GT   =>|| | NESTED_GT  =>|| ) Spacing
         
; 
<ANY> TOKEN : <ANY_CHAR: ~[] >;
<CLASS_0_STATE> TOKEN: <CLASS_0: ["a"-"z","A"-"Z","_"] >;
<CLASS_1_STATE> TOKEN: <CLASS_1: ["0"-"9"] >;
<CLASS_2_STATE> TOKEN: <CLASS_2: ["n","r","t","\"","'","[","]","\\"] >;
<CLASS_3_STATE> TOKEN: <CLASS_3: ["u","U"] >;
<CLASS_4_STATE> TOKEN: <CLASS_4: ["0"-"9","a"-"f","A"-"F"] >;
<CLASS_5_STATE> TOKEN: <CLASS_5: ["0"-"2"] >;
<CLASS_6_STATE> TOKEN: <CLASS_6: ["0"-"7"] >;
<CLASS_7_STATE> TOKEN: <CLASS_7: ["1"-"9"] >;
