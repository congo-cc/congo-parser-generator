# This is essentially Bryan Ford's original PEG grammar as defined by his paper 
# titled "Parsing Expression Grammars: A Recognition-based Syntactic Foundation" 
# in POPL'04 January 14-16, 2004, Venice, Italy.  It has been extended to illustrate the
# addition of entailment and repetition cardinality constraints to allow more efficient
# LL parsing and a compact way to recognize restricted cardinality of Primaries respectively.
# It also allows "_" in identifiers, which is now a ubiquitous capability in everything, and both an
# ASCII version of "entails" and the prioritized choice character and a Unicode version of both that 
# is more modern. Identifiers may be surrounded by balanced "<" and ">".  This allows external 
# CongoCC tokens can be referenced or mimicked within the PEG grammar. This allows the PEG grammar 
# to utilize the full power of the a CongoCC-generated lexer if it needs to.
#
# N.B., Entailment in Extended PEG functions identically to "=>||" in CongoCC. It is possible
# that this will change in the future. It is also probable that the original PEG commenting syntax
# will be changed to match modern conventions (i.e., Java/C-like) and that the "#" will replace the
# "%" for cardinality predicates.
#
# By convention, nonterminals begin with an upper-case letter, terminals are all upper-case, and lexer
# tokens are all upper-case within "<...>".  Munging and disambiguation element names are prefixed with an 
# "_" character.

# This grammar is parsable by the original PEG grammar. See peg-ext-alt.peg for one that uses these features appropriately.

#########################
## Hierarchical Syntax ##
#########################

Grammar     <- Spacing (Definition)+ EndOfFile
Definition  <- Identifier (LEFTARROW / COLON) Expression ';'?
Expression  <- Sequence (SLASH Sequence)*
Sequence    <- (Prefix ENTAILS?)*
Prefix      <- (Cardinality / AND / NOT)? Suffix
Suffix      <- Primary (QUESTION / STAR / PLUS)?
Primary     <- Identifier !(LEFTARROW / COLON)
             / OPEN Expression CLOSE
             / Literal / Class / DOT
             
####################
## Lexical Syntax ##
####################
    
Identifier  <- (IdentStart IdentCont* / '<' Identifier '>') Spacing
IdentStart  <- [a-zA-Z_]
IdentCont   <- IdentStart / [0-9]
Literal     <- ['] (!['] Char)* ['] Spacing 
             / ["] (!["] Char)* ["] Spacing 
Class       <- '[' (!']' Range )* ']' Spacing
Range       <- Char '-' Char / Char
Char        <- '\\' [nrt"'\[\]\\]
             / '\\' [0-2] [0-7] [0-7]
             / '\\' [0-7] [0-7]? 
             / !'\\' .

LEFTARROW   <- '<-' Spacing
COLON       <- ':' Spacing
SLASH       <- ('/' / '|') Spacing
AND         <- '&' Spacing
NOT         <- '!' Spacing
QUESTION    <- '?' Spacing
STAR        <- '*' Spacing
PLUS        <- '+' Spacing
OPEN        <- '(' Spacing
CLOSE       <- ')' Spacing
DOT         <- '.' Spacing

Spacing     <- ( Space / Comment )*
Comment     <- '#' (!EndOfLine .)* EndOfLine
Space       <- ' ' / '\t' / EndOfLine
EndOfLine   <- '\r\n' / '\n' / '\r'
EndOfFile   <- !.
             
######################
## Extension Syntax ##
######################

Cardinality <- '%' (NATURAL (':' NATURAL? '%')? )? Spacing
NATURAL     <- '0' / [1-9] [0-9]* Spacing
ENTAILS     <- ('>>>' / 'â«¸') Spacing
        