[#-- This template contains the core logic for generating the various parser routines. --]

[#import "CommonUtils.inc.ftl" as CU]

[#var nodeNumbering = 0]
[#var NODE_USES_PARSER = settings.nodeUsesParser]
[#var NODE_PREFIX = grammar.nodePrefix]
[#var currentProduction]
[#var topLevelExpansion] [#-- A "one-shot" indication that we are processing 
                              an expansion immediately below the BNF production expansion, 
                              ignoring an ExpansionSequence that might be there. This is
                              primarily, if not exclusively, for allowing JTB-compatible
                              syntactic trees to be built. While seemingly silly (and perhaps could be done differently), 
                              it is also a bit tricky, so treat it like the Holy Hand-grenade in that respect. 
                          --]

[#macro Productions]
// ===================================================================
// Start of methods for BNF Productions
// This code is generated by the ParserProductions.inc.ftl template.
// ===================================================================
[#list grammar.parserProductions as production]
      [#set nodeNumbering = 0]
  [@CU.firstSetVar production.expansion/]
   [#if !production.onlyForLookahead]
    [#set currentProduction = production]
    [@ParserProduction production/]
   [/#if]
[/#list]
[#if settings.faultTolerant]
  [@BuildRecoverRoutines /]
[/#if]
[/#macro]

[#macro ParserProduction production]
    [#set nodeNumbering = 0]
    [#set newVarIndex = 0 in CU]
    [#-- Generate the method modifiers and header --] 
        ${production.leadingComments}
        // ${production.location}
        ${globals.startProduction()}${globals.translateModifiers(production.accessModifier)} ${globals.translateType(production.returnType)} Parse${production.name}([#if production.parameterList?has_content]${globals.translateParameters(production.parameterList)}[/#if]) {
            var prevProduction = _currentlyParsedProduction;
            _currentlyParsedProduction = "${production.name}";
            [#--${production.javaCode!}
            This is actually inserted further down because
            we want the prologue java code block to be able to refer to 
            CURRENT_NODE.
            --]
            [#set topLevelExpansion = false]
            ${BuildCode(production, 12)}
        }
        // end of Parse${production.name}${globals.endProduction()}

[/#macro]

[#--
   Macro to build routines that scan up to the start of an expansion
   as part of a recovery routine
--]
[#macro BuildRecoverRoutines]
   [#list grammar.expansionsNeedingRecoverMethod as expansion]
    def ${expansion.recoverMethodName}(self):
        Token initialToken = LastConsumedToken;
        IList<Token> skippedTokens = new List<Token>();
        bool success = false;
        while (LastConsumedToken.Type != TokenType.EOF) {
[#if expansion.simpleName = "OneOrMore" || expansion.simpleName = "ZeroOrMore"]
            if (${ExpansionCondition(expansion.nestedExpansion)}) {
[#else]
            if (${ExpansionCondition(expansion)}) {
[/#if]
                success = true;
                break;
            }
            [#if expansion.simpleName = "ZeroOrMore" || expansion.simpleName = "OneOrMore"]
               [#var followingExpansion = expansion.followingExpansion]
               [#list 1..1000000 as unused]
                [#if followingExpansion?is_null][#break][/#if]
                [#if followingExpansion.maximumSize >0]
                 [#if followingExpansion.simpleName = "OneOrMore" || followingExpansion.simpleName = "ZeroOrOne" || followingExpansion.simpleName = "ZeroOrMore"]
                if (${ExpansionCondition(followingExpansion.nestedExpansion)}):
                 [#else]
                if (${ExpansionCondition(followingExpansion)}):
                 [/#if]
                    success = true;
                    break;
                }
                [/#if]
                [#if !followingExpansion.possiblyEmpty][#break][/#if]
                [#if followingExpansion.followingExpansion?is_null]
                if (OuterFollowSet != null) {
                    if (OuterFollowSet.Contains(NextTokenType)) {
                        success = true;
                        break;
                    }
                }
                 [#break/]
                [/#if]
                [#set followingExpansion = followingExpansion.followingExpansion]
               [/#list]
             [/#if]
            LastConsumedToken = NextToken(LastConsumedToken);
            skippedTokens.AddLastConsumedToken);
        if (!success && skippedTokens.Count > 0) {
             LastConsumedToken = initialToken;
        }
        if (success && skippedTokens.Count > 0) {
            iv = InvalidNode(self);
            [#-- OMITTED: iv.copyLocationInfo(skippedTokens.get(0));--]
            foreach (var tok in skippedTokens) {
                iv.AddChild(tok);
                [#-- OMITTED: iv.setEndOffset(tok.getEndOffset()); --]
            }
            PushNode(iv);
        pendingRecovery = !success;

   [/#list]
[/#macro]

[#macro BuildCode expansion indent]
[#var is=""?right_pad(indent)]
[#-- // DBG > BuildCode ${indent} ${expansion.simpleName} --]
  [#if expansion.simpleName != "ExpansionSequence" && expansion.simpleName != "ExpansionWithParentheses"]
// Code for ${expansion.simpleName} specified at ${expansion.location}
  [/#if]
     [@CU.HandleLexicalStateChange expansion false indent; indent]
      [#if settings.faultTolerant && expansion.requiresRecoverMethod && !expansion.possiblyEmpty]
if (_pendingRecovery) {
    ${expansion.recoverMethodName}();
}
      [/#if]
       [@BuildExpansionCode expansion indent/]
     [/@CU.HandleLexicalStateChange]
[#-- // DBG < BuildCode ${indent} ${expansion.simpleName} --]
[/#macro]

[#macro TreeBuildingAndRecovery expansion indent]
[#var is=""?right_pad(indent)]
[#-- // DBG > TreeBuildingAndRecovery ${indent} --]
    [#var production,
          treeNodeBehavior,
          buildingTreeNode=false,
          nodeVarName,
          javaCodePrologue = null,
          parseExceptionVar = CU.newVarName("parseException"),
          callStackSizeVar = CU.newVarName("callStackSize"),
          canRecover = settings.faultTolerant && expansion.tolerantParsing && expansion.simpleName != "Terminal"
    ]
    [#set treeNodeBehavior = resolveTreeNodeBehavior(expansion)]
    [#if expansion == currentProduction]
        [#set production = currentProduction]
        [#set javaCodePrologue = production.javaCode!] 
    [/#if]
    [#if treeNodeBehavior??]
        [#if settings.treeBuildingEnabled]
            [#set buildingTreeNode = true]
            [#set nodeVarName = nodeVar(production??)]
        [/#if]
    [/#if]
    [#if !buildTreeNode && !canRecover]
${globals.translateCodeBlock(javaCodePrologue, indent)}[#rt]
        [#nested indent]
    [#else]
        [#-- We need tree nodes and/or recovery code. --]      
        [#if buildingTreeNode]
            [#-- Build the tree node (part 1). --]
            [@buildTreeNode production treeNodeBehavior nodeVarName /]
        [/#if]
        [#-- The prologue code can refer to CURRENT_NODE at this point. --]
${globals.translateCodeBlock(javaCodePrologue, indent)}
ParseException ${parseExceptionVar} = null;
var ${callStackSizeVar} = ParsingStack.Count;
try {
        [#--     pass  # in case there's nothing else in the try clause! --]
        [#-- Here is the "nut". --]
        [#nested indent + 4]
}
catch (ParseException e) {
    ${parseExceptionVar} = e;
        [#if !canRecover]
            [#if settings.faultTolerant]
    if (IsTolerant) _pendingRecovery = true;
            [/#if]
    throw;
        [#else]
    if (!IsTolerant) throw;
    _pendingRecovery = true;
         ${expansion.customErrorRecoveryBlock!}
            [#if !production?is_null && production.returnType != "void"]
                [#var rt = production.returnType]
                [#-- We need a return statement here or the code won't compile! --]
                [#if rt = "int" || rt="char" || rt=="byte" || rt="short" || rt="long" || rt="float"|| rt="double"]
       return 0;
                [#else]
       return null;
                [/#if]
            [/#if]
        [/#if]
}
finally {
    RestoreCallStack(${callStackSizeVar});
[#if buildingTreeNode]
    [#-- Build the tree node (part 2). --]
    [@buildTreeNodeEpilogue treeNodeBehavior nodeVarName parseExceptionVar /]
[/#if]
    _currentlyParsedProduction = prevProduction;
}
[/#if]
[#-- // DBG < TreeBuildingAndRecovery ${indent} --]
[/#macro]

[#function resolveTreeNodeBehavior expansion]
   [#var treeNodeBehavior = expansion.treeNodeBehavior]
   [#var isProduction = false]
   [#if expansion.simpleName = "BNFProduction"]
      [#set isProduction = true]
   [/#if]
   [#if !treeNodeBehavior??] 
      [#if isProduction && !settings.nodeDefaultVoid 
                        && !grammar.nodeIsInterface(expansion.name)
                        && !grammar.nodeIsAbstract(expansion.name)]
         [#if settings.smartNodeCreation]
            [#set treeNodeBehavior = {"nodeName" : expansion.name!"nemo", "condition" : "1", "gtNode" : true, "void" :false, "initialShorthand" : ">"}]
         [#else]
            [#set treeNodeBehavior = {"nodeName" : expansion.name!"nemo", "condition" : null, "gtNode" : false, "void" : false}]
         [/#if]
      [/#if]
   [/#if]
   [#if treeNodeBehavior?? && treeNodeBehavior.neverInstantiated?? && treeNodeBehavior.neverInstantiated]
      [#return null/]
   [/#if]
   [#return treeNodeBehavior]
[/#function]

[#function nodeVar isProduction]
   [#var nodeVarName]
   [#if isProduction]
      [#set nodeVarName = "thisProduction"] [#-- [JB] maybe should be "CURRENT_PRODUCTION" or "THIS_PRODUCTION" to match "CURRENT_NODE"? --]
   [#else]
      [#set nodeNumbering = nodeNumbering +1]
      [#set nodeVarName = currentProduction.name + nodeNumbering] 
   [/#if]
   [#return nodeVarName/]
[/#function]

[#macro buildTreeNode production treeNodeBehavior nodeVarName]
   ${globals.pushNodeVariableName(nodeVarName)!}
   [@createNode nodeClassName(treeNodeBehavior) nodeVarName /]
[/#macro]

[#--  Boilerplate code to create the node variable --]
[#macro createNode treeNodeBehavior nodeClass nodeVarName indent]
[#var is=""?right_pad(indent)]
   [#var nodeName = nodeClassName(treeNodeBehavior)]
${nodeClass} ${nodeVarName} = null;
if (BuildTree) {
    ${nodeVarName} = new ${nodeClass}([#if settings.nodeUsesParser]this[#else]tokenSource[/#if]);
    OpenNodeScope(${nodeVarName});
}
[/#macro]

[#macro buildTreeNodeEpilogue treeNodeBehavior nodeVarName parseExceptionVar]
   if (${nodeVarName}!=null) {
      if (${parseExceptionVar} == null) {
   [#if treeNodeBehavior?? && treeNodeBehavior.LHS??]
      [#var LHS = getLhsPattern(treeNodeBehavior)]
         if (CloseNodeScope(${nodeVarName}, ${closeCondition(treeNodeBehavior)})) {
            ${LHS?replace("@", "(" + nodeClassName(treeNodeBehavior) + ") PeekNode()")};
         } else{
            ${LHS?replace("@", "null")};
         }
   [#else]
         CloseNodeScope(${nodeVarName}, ${closeCondition(treeNodeBehavior)}); 
   [/#if]
   [#list grammar.closeNodeHooksByClass[nodeClassName(treeNodeBehavior)]! as hook]
         ${hook}(${nodeVarName});
   [/#list]
      } else {
   [#if settings.faultTolerant]
         CloseNodeScope(${nodeVarName}, true);
         ${nodeVarName}.dirty = true;
   [#else]
         ClearNodeScope();
   [/#if]
      }
   }
   ${globals.popNodeVariableName()!}
[/#macro]

[#function getLhsPattern expansion]
   [#if expansion.LHS??]
      [#var LHS = expansion.LHS]
      [#if expansion.isLhsProperty?? && expansion.isLhsProperty()]
         [#set LHS = LHS?cap_first]
         [#-- It is a property setter --]
         [#return "thisProduction.set" + LHS + "(@)" /]
      [/#if]
      [#-- It needs simple assignment --]
      [#return LHS + " = @" /]
   [/#if]
   [#-- There is no LHS --]
   [#return "@" /]
[/#function]

[#function closeCondition treeNodeBehavior]
   [#var cc = "true"]
   [#if treeNodeBehavior??]
      [#if treeNodeBehavior.condition?has_content]
         [#set cc = treeNodeBehavior.condition]
         [#if treeNodeBehavior.gtNode]
            [#set cc = "nodeArity() " + treeNodeBehavior.initialShorthand  + cc]
         [/#if]
      [/#if]
   [/#if]
   [#return cc/]
[/#function]

[#function nodeClassName treeNodeBehavior]
   [#if treeNodeBehavior?? && treeNodeBehavior.nodeName??]
      [#return NODE_PREFIX + treeNodeBehavior.nodeName]
   [/#if]
   [#return NODE_PREFIX + currentProduction.name]
[/#function]

[#macro BuildExpansionCode expansion indent]
   [#var classname=expansion.simpleName]
   [#var prevLexicalStateVar = CU.newVarName("previousLexicalState")]
   [#-- take care of the non-tree-building classes --]
   [#if classname = "CodeBlock"]
${globals.translateCodeBlock(expansion, indent)}
   [#elseif classname = "UncacheTokens"]
         uncacheTokens();
   [#elseif classname = "Failure"]
      [@BuildCodeFailure expansion indent/]
   [#elseif classname = "Assertion"]
      [@BuildAssertionCode expansion indent/]
   [#elseif classname = "TokenTypeActivation"]
      [@BuildCodeTokenTypeActivation expansion indent/]
   [#elseif classname = "TryBlock"]
      [@BuildCodeTryBlock expansion indent/]
   [#elseif classname = "AttemptBlock"]
      [@BuildCodeAttemptBlock expansion indent/]
   [#else]
      [#-- take care of the tree node (if any) --]
      [@TreeBuildingAndRecovery expansion indent; indent]
         [#if classname = "BNFProduction"]
            [#-- The tree node having been built, now build the actual top-level expansion --]
            [#set topLevelExpansion = true]
            // top-level expansion ${expansion.nestedExpansion.simpleName}
            [@BuildCode expansion.nestedExpansion/]
         [#else]
            [#-- take care of terminal and non-terminal expansions; they cannot contain child expansions --]
            [#if classname = "NonTerminal"]
               [@BuildCodeNonTerminal expansion indent/]
            [#elseif classname = "Terminal"]
               [@BuildCodeTerminal expansion indent/]
            [#else]
               [#-- take care of the syntactical expansions (which can contain child expansions) --]
               [#-- capture the top-level indication in order to restore when bubbling up --]
               [#var stackedTopLevel = topLevelExpansion]
               [#if topLevelExpansion && classname != "ExpansionSequence"]
                  [#-- turn off top-level indication unless an expansion sequence (the tree node has already been determined when this nested template is expanded) --]
                  [#set topLevelExpansion = false]
               [/#if]
               [#if classname = "ZeroOrOne"]
                  [@BuildCodeZeroOrOne expansion indent/]
               [#elseif classname = "ZeroOrMore"]
                  [@BuildCodeZeroOrMore expansion indent/]
               [#elseif classname = "OneOrMore"]
                  [@BuildCodeOneOrMore expansion indent/]
               [#elseif classname = "ExpansionChoice"]
                  [@BuildCodeChoice expansion indent/]
               [#elseif classname = "ExpansionWithParentheses"]
                  [@BuildExpansionCode expansion.nestedExpansion indent/]
               [#elseif classname = "ExpansionSequence"]
                  [@BuildCodeSequence expansionindent /] [#-- leave the topLevelExpansion one-shot alone (see above) --]
               [/#if]
               [#set topLevelExpansion = stackedTopLevel]
            [/#if]
         [/#if]
      [/@TreeBuildingAndRecovery]
   [/#if]
[/#macro]

[#macro BuildCodeFailure fail indent]
[#var is = ""?right_pad(indent)]
[#-- // DBG > BuildCodeFailure ${indent} --]
    [#if fail.code?is_null]
      [#if fail.exp??]
Fail("Failure: " + ${fail.exp});
      [#else]
Fail("Failure");
      [/#if]
    [#else]
${globals.translateCodeBlock(fail.code, indent)}
    [/#if]
[#-- // DBG < BuildCodeFailure ${indent} --]
[/#macro]

[#macro BuildAssertionCode assertion indent]
[#var is = ""?right_pad(indent)]
[#var optionalPart = ""]
[#if assertion.messageExpression??]
  [#set optionalPart = " + " + globals.translateExpression(assertion.messageExpression)]
[/#if]
   [#var assertionMessage = "Assertion at: " + assertion.location?j_string + " failed. "]
   [#if assertion.assertionExpression??]
if (!(${globals.translateExpression(assertion.assertionExpression)})) {
    Fail("${assertionMessage}"${optionalPart});
}
   [/#if]
   [#if assertion.expansion??]
if ([#if !assertion.expansionNegated]![/#if]${assertion.expansion.scanRoutineName}()) {
    Fail("${assertionMessage}"${optionalPart});
}
   [/#if]
[/#macro]

[#macro BuildCodeTokenTypeActivation activation indent]
[#var is = ""?right_pad(indent)]
[#-- // DBG > BuildCodeTokenTypeActivation ${indent} --]
[#if activation.deactivate]
DeactivateTokenTypes(
[#else]
ActivateTokenTypes(
[/#if]
[#list activation.tokenNames as name]
    ${name}[#if name_has_next],[/#if]
[/#list]
);
[#-- // DBG < BuildCodeTokenTypeActivation ${indent} --]
[/#macro]

[#macro BuildCodeTryBlock tryblock indent]
[#var is = ""?right_pad(indent)]
// DBG > BuildCodeTryBlock ${indent}
try:
${BuildCode(tryblock.nestedExpansion, indent + 4)}
   [#list tryblock.catchBlocks as catchBlock]
   # TODO verify indentation
${catchBlock}
   [/#list]
   # TODO verify indentation
${tryblock.finallyBlock!}
// DBG < BuildCodeTryBlock ${indent}
[/#macro]

[#macro BuildCodeAttemptBlock attemptBlock indent]
[#var is = ""?right_pad(indent)]
// DBG > BuildCodeAttemptBlock ${indent}
try {
    StashParseState();
${BuildCode(attemptBlock.nestedExpansion, indent + 4)}
    PopParseState();
}
catch (ParseException) {
    RestoreStashedParseState();
${BuildCode(attemptBlock.recoveryExpansion, indent + 4)}
}
// DBG < BuildCodeAttemptBlock ${indent}
[/#macro]

[#----------------here------------------------]

[#-- The following macros build expansions that might build tree nodes (could be called "syntactic" nodes). --]

[#macro BuildCodeNonTerminal nonterminal]
[#var is = ""?right_pad(indent)]
[#-- // DBG > BuildCodeNonTerminal ${indent} ${nonterminal.production.name} --]
   [#var production = nonterminal.production]
PushOntoCallStack("${nonterminal.containingProduction.name}", "${nonterminal.inputSource?j_string}", ${nonterminal.beginLine}, ${nonterminal.beginColumn});
   [#var followSet = nonterminal.followSet]
   [#if !followSet.incomplete]
      [#if !nonterminal.beforeLexicalStateSwitch]
OuterFollowSet = ${nonterminal.followSetVarName};
      [#else]
OuterFollowSet = null;
      [/#if]
   [#else]
     [#if !followSet.isEmpty()]
if (OuterFollowSet != null) {
    var newFollowSet = new HashSet<TokenType>(${nonterminal.followSetVarName});
    newFollowSet.UnionWith(OuterFollowSet);
    OuterFollowSet = newFollowSet;
}
     [/#if]
   [/#if]
try {
    [@AcceptNonTerminal nonterminal /]
}
finally {
    PopCallStack();
}
[#-- // DBG < BuildCodeNonTerminal ${indent} ${nonterminal.production.name} --]
[/#macro]

[#macro AcceptNonTerminal nonterminal]
   [#var expressedLHS = getLhsPattern(nonterminal)]
   [#-- Accept the non-terminal expansion --]
   [#if nonterminal.production.returnType != "void" && expressedLHS != "@"]
      [#-- Not a void production, so accept and clear the expressedLHS, it has already been applied. --]
      ${expressedLHS?replace("@", nonterminal.name + "(" + nonterminal.args! + ")")};
      [#set expressedLHS = "@"]
   [#else]
      ${nonterminal.name}(${nonterminal.args!});
   [/#if]
   [#if expressedLHS != "@"]
      try {
         [#-- There had better be a node here! --]
         ${expressedLHS?replace("@", "(" + nonterminal.production.nodeName + ") PeekNode()")};
      } catch (ClassCastException cce) {
         ${expressedLHS?replace("@", "null")};
      }
   [/#if]
   [#if nonterminal.childName??]
      if (BuildTree) {
         Node child = PeekNode();
         String name = "${nonterminal.childName}";
      [#if nonterminal.multipleChildren]
         ${globals.currentNodeVariableName}.AddToNamedChildList(name, child);
      [#else]
         ${globals.currentNodeVariableName}.SetNamedChild(name, child);
      [/#if]
      }
   [/#if] 
[/#macro]

[#macro BuildCodeTerminal terminal indent]
   [#var LHS = getLhsPattern(terminal), regexp=terminal.regexp]
[#var is = ""?right_pad(indent)]
[#-- // DBG > BuildCodeRegexp ${indent} --]
   [#if !settings.faultTolerant]
${LHS?replace("@", "ConsumeToken(" + regexp.label + ")")};
   [#else]
       [#var tolerant = terminal.tolerantParsing?string("true", "false")]
       [#var followSetVarName = terminal.followSetVarName]
       [#if terminal.followSet.incomplete]
         [#set followSetVarName = "followSet" + CU.newID()]
HashSet<TokenType> ${followSetVarName} = null;
if (OuterFollowSet != null) {
    ${followSetVarName} = ${terminal.followSetVarName}.Clone();
    ${followSetVarName}.AddAll(OuterFollowSet);
}
       [/#if]
${LHS?replace("@", "ConsumeToken(" + regexp.label + ", " + tolerant + ", " + followSetVarName + ")")};
   [/#if]
   [#if !terminal.childName?is_null && !globals.currentNodeVariableName?is_null]
if (BuildTree) {
    Node child = PeekNode();
    string name = "${terminal.childName}";
    [#if terminal.multipleChildren]
    ${globals.currentNodeVariableName}.AddToNamedChildList(name, child);
    [#else]
    ${globals.currentNodeVariableName}.SetNamedChild(name, child);
    [/#if]
}
   [/#if]

[#-- // DBG < BuildCodeRegexp ${indent} --]
[/#macro]

[#macro BuildCodeZeroOrOne zoo indent]
[#var is = ""?right_pad(indent)]
[#-- // DBG > BuildCodeZeroOrOne ${indent} ${zoo.nestedExpansion.class.simpleName} --]
    [#if zoo.nestedExpansion.class.simpleName = "ExpansionChoice"]
${BuildCode(zoo.nestedExpansion, indent)}
    [#else]
if (${ExpansionCondition(zoo.nestedExpansion)}) {
${BuildCode(zoo.nestedExpansion, indent + 4)}
}
    [/#if]
[#-- // DBG < BuildCodeZeroOrOne ${indent} ${zoo.nestedExpansion.class.simpleName} --]
[/#macro]

[#var inFirstVarName = "", inFirstIndex =0]

[#macro BuildCodeOneOrMore oom indent]
[#var is = ""?right_pad(indent)]
[#-- // DBG > BuildCodeOneOrMore ${indent} --]
[#var nestedExp=oom.nestedExpansion, prevInFirstVarName = inFirstVarName/]
   [#if nestedExp.simpleName = "ExpansionChoice"]
     [#set inFirstVarName = "inFirst" + inFirstIndex, inFirstIndex = inFirstIndex +1 /]
var ${inFirstVarName} = true;
   [/#if]
while (true) {
${RecoveryLoop(oom, indent + 4)}
      [#if nestedExp.simpleName = "ExpansionChoice"]
    ${inFirstVarName} = false;
      [#else]
    if (!(${ExpansionCondition(oom.nestedExpansion)})) break;
      [/#if]
}
   [#set inFirstVarName = prevInFirstVarName /]
[#-- // DBG < BuildCodeOneOrMore ${indent} --]
[/#macro]

[#macro BuildCodeZeroOrMore zom indent]
[#var is = ""?right_pad(indent)]
[#-- // DBG > BuildCodeZeroOrMore ${indent} --]
while (true) {
       [#if zom.nestedExpansion.class.simpleName != "ExpansionChoice"]
    if (!(${ExpansionCondition(zom.nestedExpansion)})) break;
       [/#if]
       [@RecoveryLoop zom indent + 4 /]
}
[#-- // DBG < BuildCodeZeroOrMore ${indent} --]
[/#macro]

[#macro RecoveryLoop loopExpansion indent]
[#var is = ""?right_pad(indent)]
[#-- // DBG > RecoveryLoop ${indent} --]
[#if !settings.faultTolerant || !loopExpansion.requiresRecoverMethod]
${BuildCode(loopExpansion.nestedExpansion, indent)}
[#else]
[#var initialTokenVarName = "initialToken" + CU.newID()]
${initialTokenVarName} = LastConsumedToken;
try {
${BuildCode(loopExpansion.nestedExpansion, indent + 4)}
}
catch (ParseException pe) {
    if (!IsTolerant) throw;
    if (debugFaultTolerant) {
        // logger.info('Handling exception. Last consumed token: %s at: %s', lastConsumedToken.image, lastConsumedToken.location)
    }
    if (${initialTokenVarName} == LastConsumedToken) {
        LastConsumedToken = NextToken(LastConsumedToken);
        // We have to skip a token in this spot or
        // we'll be stuck in an infinite loop!
        LastConsumedToken.skipped = true;
        if (debugFaultTolerant) {
            // logger.info('Skipping token %s at: %s', lastConsumedToken.image, lastConsumedToken.location)
        }
    }
    if (debugFaultTolerant) {
        // logger.info('Repeat re-sync for expansion at: ${loopExpansion.location?j_string}');
    }
    ${loopExpansion.recoverMethodName}();
    if (pendingRecovery) throw;
   [/#if]
[#-- // DBG < RecoveryLoop ${indent} --]
[/#macro]

[#macro BuildCodeChoice choice indent]
[#var is = ""?right_pad(indent)]
[#-- // DBG > BuildCodeChoice ${indent} --]
   [#list choice.choices as expansion]
${(expansion_index=0)?string("if", "else if")} (${ExpansionCondition(expansion)}) {
${BuildCode(expansion, indent + 4)}
}



   [/#list]
   [#if choice.parent.simpleName == "ZeroOrMore"]
else {
    break;
}
   [#elseif choice.parent.simpleName = "OneOrMore"]
else if (${inFirstVarName}) {
    PushOntoCallStack("${currentProduction.name}", "${choice.inputSource?j_string}", ${choice.beginLine}, ${choice.beginColumn});
    throw new ParseException(this, ${choice.firstSetVarName});
}
else {
    break;
}
   [#elseif choice.parent.simpleName != "ZeroOrOne"]
else {
    PushOntoCallStack("${currentProduction.name}", "${choice.inputSource?j_string}", ${choice.beginLine}, ${choice.beginColumn});
    throw new ParseException(this, ${choice.firstSetVarName});
}
   [/#if]
[#-- // DBG < BuildCodeChoice ${indent} --]
[/#macro]

[#macro BuildCodeSequence expansion indent]
[#var is = ""?right_pad(indent)]
[#-- // DBG > BuildCodeSequence ${indent} --]
  [#list expansion.units as subexp]
${BuildCode(subexp, indent)}
  [/#list]
[#-- // DBG < BuildCodeSequence ${indent} --]
[/#macro]

[#--
     Macro to generate the condition for entering an expansion
     including the default single-token lookahead
--]
[#macro ExpansionCondition expansion]
[#if expansion.requiresPredicateMethod]${ScanAheadCondition(expansion)}[#else]${SingleTokenCondition(expansion)}[/#if]
[/#macro]


[#-- Generates code for when we need a scanahead --]
[#macro ScanAheadCondition expansion]
[#if expansion.lookahead?? && expansion.lookahead.LHS??](${expansion.lookahead.LHS} = [/#if][#if expansion.hasSemanticLookahead && !expansion.lookahead.semanticLookaheadNested](${globals.translateExpression(expansion.semanticLookahead)}) && [/#if]${expansion.predicateMethodName}()[#if expansion.lookahead?? && expansion.lookahead.LHS??])[/#if]
[/#macro]


[#-- Generates code for when we don't need any scanahead routine --]
[#macro SingleTokenCondition expansion]
   [#if expansion.hasSemanticLookahead](${globals.translateExpression(expansion.semanticLookahead)}) && [/#if]
   [#if expansion.firstSet.tokenNames?size = 0 || expansion.lookaheadAmount ==0 || expansion.minimumSize=0]true[#elseif expansion.firstSet.tokenNames?size < 5][#list expansion.firstSet.tokenNames as name](NextTokenType == TokenType.${name})[#if name_has_next] || [/#if][/#list][#else](${expansion.firstSetVarName}.Contains(NextTokenType))[/#if]
[/#macro]
