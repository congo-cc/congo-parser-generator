ENSURE_FINAL_EOL;
JAVA_UNICODE_ESCAPE;
PARSER_PACKAGE=org.congocc.parser;
NODE_PACKAGE=org.congocc.parser.tree;
DEFAULT_LEXICAL_STATE=JAVA;
BASE_SRC_DIR="../../build/generated-java";
TOKEN_CHAINING;
USES_PREPROCESSOR;

DEACTIVATE_TOKENS=_INCLUDE,_INJECT,_EOF;

#if fault_tolerant
  Howdy!!!
 FAULT_TOLERANT=true;
#endif

INJECT LEXER_CLASS : 
{
  // Set whether to generate unparsed tokens for WHITESPACE
  static public void keepWhitespace(boolean b) {
    if (b) {
        skippedTokens.remove(WHITESPACE);
        unparsedTokens.add(WHITESPACE);
    } else {
        skippedTokens.add(WHITESPACE);
        unparsedTokens.remove(WHITESPACE);
    }
  }
}

INJECT PARSER_CLASS :
    import java.util.*;
    import org.congocc.app.*;
    import org.congocc.core.*;
    import org.congocc.parser.tree.StringLiteral;
    import org.congocc.parser.tree.IntegerLiteral;
    import org.congocc.preprocessor.PreprocessorParser;
    import org.congocc.parser.csharp.CSParser;
    import org.congocc.parser.python.PythonParser;
    import org.congocc.parser.python.ast.Module;
{
    Grammar grammar;
    
    public PARSER_CLASS(Grammar grammar, Path path, Map<String, String> definedSymbols) throws IOException {
        this(path.toString(), path);
        this.grammar = grammar;
        BitSet lineMarkers = null;
        try {
            PreprocessorParser ppp = new PreprocessorParser(path, definedSymbols);
            lineMarkers = ppp.PP_Root();
        } catch (org.congocc.preprocessor.ParseException pe) {
            throw new RuntimeException(pe);
        }
        token_source.setParsedLines(lineMarkers);
    }

    public PARSER_CLASS(Grammar grammar, String inputSource, CharSequence content) {
         this(inputSource, content);
         this.grammar = grammar;
         BitSet lineMarkers = null;
         try {
             lineMarkers = new PreprocessorParser(content).PP_Root();
         } catch(org.congocc.preprocessor.ParseException pe) {
             throw new RuntimeException(pe);
         }
         token_source.setParsedLines(lineMarkers);
    }
    
    static public CompilationUnit parseJavaFile(String inputSource, CharSequence content) {
        PARSER_CLASS parser = new PARSER_CLASS(inputSource, content);
        return parser.CompilationUnit();
    }

    static public CompilationUnit parseJavaFile(Path path) throws IOException {
        PARSER_CLASS parser = new PARSER_CLASS(path);
        return parser.CompilationUnit();
    }

    static public Module parsePythonFile(String inputSource, CharSequence content, boolean useAltIndentDedent) {
        PythonParser parser = new PythonParser(inputSource, content);
//        parser.setUseAltIndentDedent(useAltIndentDedent);
        return parser.Module();
    }

    static public Module parsePythonFile(Path path, boolean useAltIndentDedent) throws IOException {
        PythonParser parser = new PythonParser(path);
//        parser.setUseAltIndentDedent(useAltIndentDedent);
        return parser.Module();
    }
    
    static public org.congocc.parser.csharp.ast.CompilationUnit parseCSharpFile(String inputSource, CharSequence content) {
        CSParser parser  = new CSParser(inputSource, content);
        return parser.CompilationUnit();
    } 

    static public org.congocc.parser.csharp.ast.CompilationUnit parseCSharpFile(Path path) throws IOException {
        CSParser parser  = new CSParser(path);
        return parser.CompilationUnit();
    } 

    public Grammar getGrammar() {
        return grammar;
    }

    public AppSettings getAppSettings() {
        return grammar.getAppSettings();
    }

    public Errors getErrors() {
        return grammar.getErrors();
    }
    
    public void openNodeScopeHook(Node n) {
        n.setGrammar(grammar);
    }

}

/* congocc RESERVED WORDS: These are the only tokens in congocc but not in Java */

TOKEN :
  < _INJECT: "INJECT" > #CongoCCKeyWord
  |
  < _INCLUDE : "INCLUDE" | "INCLUDE_GRAMMAR"> #CongoCCKeyWord
  |
  < _FAIL : "FAIL" > #CongoCCKeyWord
  |
  < _UNCACHE_TOKENS : "UNCACHE_TOKENS"> #CongoCCKeyWord
  |
  < _ACTIVE_TOKENS : "ACTIVE_TOKENS"> #CongoCCKeyWord
  |
  < _ACTIVATE_TOKENS : "ACTIVATE_TOKENS"> #CongoCCKeyWord
  |
  < _DEACTIVATE_TOKENS : "DEACTIVATE_TOKENS"> #CongoCCKeyWord  
  |
  < _ENSURE : "ASSERT"> #CongoCCKeyWord
  |
  < _SCAN : "SCAN" > #CongoCCKeyWord
  |
  < _IGNORE_CASE: "IGNORE_CASE" > #CongoCCKeyWord
  |
  < _TOKEN: "TOKEN" | "REGULAR_TOKEN"> #CongoCCKeyWord
  |
  < _CONTEXTUAL_KEYWORD: "CONTEXTUAL_KEYWORD" > #CongoCCKeyWord
  |
  < _UNPARSED: "SPECIAL_TOKEN" | "UNPARSED" > #CongoCCKeyWord
  |
  < _MORE: "MORE" | "INCOMPLETE_TOKEN" > #CongoCCKeyWord
  |
  < _SKIP: "SKIP" > #CongoCCKeyWord
  |
  <_EOF : "EOF"> #CongoCCKeyWord
  |
  < _ATTEMPT: "ATTEMPT"> #CongoCCKeyWord
  |
  < _RECOVER : "RECOVER"> #CongoCCKeyWord
  |
  < _RECOVER_TO : "RECOVER_TO"> #CongoCCKeyWord
  |
  < _ON_ERROR : "ON_ERROR"> #CongoCCKeyWord
  |
  <HASH : "#">
  |
  <BACKSLASH : "\\"> #Backslash
  |
  <RIGHT_ARROW : "=>"> #RightArrow
  |
  <UP_TO_HERE : "=>|" ("|" | ("+" ["0"-"9"]))> 
  |
  <_LEXICAL_STATE : "LEXICAL_STATE"> #CongoCCKeyWord
  |
  <SINGLE_QUOTE_STRING:
      "'"
      (
          ~["'","\\","\n","\r"]
          |
          <STRING_ESCAPE>
      ){2,}
       "'"
  > #StringLiteral
  |
  <START_UNPARSED : "{$" >
;

<IN_UNPARSED_CODE_BLOCK> TOKEN : 
  <UNPARSED_CONTENT : (~["$"] | (("$")+ ~["}"]))+ > #UnparsedContent
  |
  <END_UNPARSED : "$}" >
;

UnparsedCodeBlock #org.congocc.core.UnparsedCodeBlock : 
   <START_UNPARSED> 
   LEXICAL_STATE IN_UNPARSED_CODE_BLOCK
   (
     [<UNPARSED_CONTENT>]
     <END_UNPARSED>
   )
;

INJECT BASE_NODE_CLASS :
    import org.congocc.app.*;
    import org.congocc.core.Grammar;
    import PARSER_PACKAGE.Token.TokenType;
    implements Node; 
{
    protected void setChildren(List<Node> children) {
        this.children = children;
    }

    private Grammar grammar;

    public Grammar getGrammar() {
        if (grammar == null) {
            if (parent != null) {
               grammar = parent.getGrammar();
            }
            if (grammar==null && !children.isEmpty()) {
               grammar = children.get(0).getGrammar();
            }
        }
        return grammar;
    }

    public void setGrammar(Grammar grammar) {
         this.grammar = grammar;
    }

    public AppSettings getAppSettings() {
        return getGrammar().getAppSettings();
    }

    public Errors getErrors() {
        return getGrammar().getErrors();
    }
    
    public String getSimpleName() {
        String name = getClass().getName();
        return name.substring(name.lastIndexOf(".") + 1); // strip the package name
    }

    public String toString() {
        StringBuilder buf = new StringBuilder();
        TerminalNode prevToken = null;
        for (TerminalNode t : getAllTokens(true)) {
            if (prevToken != null && prevToken.getEndOffset() != t.getBeginOffset()) {
                buf.append(" ");
            }
            buf.append(t);
            prevToken = t;
        }
        return buf.toString();
    }

    public String getInputSource() {
        return getTokenSource().getInputSource();
    }

    public String getLocation() {
        return getInputSource() + ":" + getBeginLine() + ":" + getBeginColumn();
    }

    public int getBeginLine() {
        TokenSource tokenSource = getTokenSource();
        return tokenSource == null ? 0 : tokenSource.getLineFromOffset(getBeginOffset());
    }

    public int getBeginColumn() {
        TokenSource tokenSource = getTokenSource();
        return tokenSource == null ? 0 : tokenSource.getCodePointColumnFromOffset(getBeginOffset());
    }
}

INJECT CompilationUnit : 
    import java.util.*;
{
    public String getPackageName() {
        PackageDeclaration jpd = getPackageDeclaration();
        return jpd == null ?  null : jpd.getPackageName().toString();
    }
    
    
    public PackageDeclaration getPackageDeclaration() {
        return firstChildOfType(PackageDeclaration.class);
    }
    
    public List<ImportDeclaration> getImportDeclarations() {
        return childrenOfType(ImportDeclaration.class);
    }
    
    public List<TypeDeclaration> getTypeDeclarations() {
        return childrenOfType(TypeDeclaration.class);
    }

    public void addImportDeclaration(ImportDeclaration decl) {
        Node firstTypeDeclaration = firstChildOfType(TypeDeclaration.class);
        if (firstTypeDeclaration == null) {
          firstTypeDeclaration = firstChildOfType(Delimiter.class); //lone semicolon, I suppose
        }
        addChild(indexOf(firstTypeDeclaration), decl);
    }
}

INJECT TypeDeclaration : 
    import java.util.*;
{
    default String getName() {
        return firstChildOfType(Identifier.class).toString();
    }
    
    default TypeParameters getTypeParameters() {
        return firstChildOfType(TypeParameters.class);
    }
    
    default ClassOrInterfaceBody getBody() {
        return firstChildOfType(ClassOrInterfaceBody.class);
    }
    
    default ExtendsList getExtendsList() {
        return firstChildOfType(ExtendsList.class);
    }
    
    default ImplementsList getImplementsList() {
        return firstChildOfType(ImplementsList.class);
    }
    
    default CompilationUnit getCompilationUnit() {
        return firstAncestorOfType(CompilationUnit.class);
    }
    
    default List<ImportDeclaration> getImportDeclarations() {
        CompilationUnit jcu = getCompilationUnit();
        return jcu==null ? new ArrayList<ImportDeclaration>() : jcu.getImportDeclarations();
    }
}

INJECT FormalParameter : 
{
    public String getName() {
        String result = null;
        Node last = getLastChild();

        if (last instanceof Identifier) {
            result = ((Identifier) last).getImage();
        }
        return result;
    }
}

INJECT FormalParameters : 
   import java.util.List;
{
    public List<FormalParameter> getParams() {
        return childrenOfType(FormalParameter.class);
    }
    
    public String toString() {
        StringBuilder buf = new StringBuilder();
        List<FormalParameter> params = getParams();
        boolean first = true;
        for (FormalParameter param : params) {
            if (!first) {
                buf.append(", ");
            }
            buf.append(param.toString());
            first = false;
        }
        return buf.toString();
    }
}

INJECT ImplementsList : 
   import java.util.*;
{    
    public List<ObjectType> getTypes() {
        return childrenOfType(ObjectType.class);
    }
    //REVISIT. fix token chaining?    
    public void addType(ObjectType type) {
        ListIterator<Node> iterator = iterator();
        if (!iterator.hasNext()) {
            iterator.add(Token.newToken(IMPLEMENTS, "implements", this.getTokenSource()));
            iterator.next();
            iterator.add(type);
        } else {
            while (iterator.hasNext()) {
                if (type.equals(iterator.next())) 
                    return;
            }
            iterator.add(Token.newToken(COMMA, ",", this.getTokenSource()));
            iterator.next();
            iterator.add(type);
        }
    }
}

INJECT CodeBlock :
  import java.util.List;
{
    public String toString() {
        StringBuilder buf = new StringBuilder();
        List<? extends TerminalNode> tokens = getAllTokens(true);
        boolean outputOpeningBrace = false;
        for (int i=0; i<tokens.size() -1; i++) {
            Token t = (Token) tokens.get(i);
            buf.append(" ");
            if (i>0 && ((Token)tokens.get(i-1)).getEndOffset() != t.getBeginOffset()) {
                buf.append(" ");
            }
            if (outputOpeningBrace) {
                buf.append(t);
            } else if (t.getType() == TokenType.LBRACE) {
                outputOpeningBrace = true;
            }
            buf.append(" ");
        }
        return buf.toString();
    }
}

INJECT InvocationArguments : 
    import java.util.*;
{
    public List<Expression> getArgs() {
        return childrenOfType(Expression.class);
    }

    public String toString() {
        StringBuilder buf = new StringBuilder();
        List<Expression> args = getArgs();
        boolean first = true;
        for (Expression arg : args) {
            if (!first) {
                buf.append(", ");
            }
            buf.append(arg.toString());
            first = false;
        }
        return buf.toString();
    }
}

// In general usage, it is probably better to INCLUDE the (more stable) Java grammar
// that is in the bootstrap jarfile.
//INCLUDE JAVA
INCLUDE "../../examples/java/Java.ccc"

VariableDeclarator# : VariableDeclaratorId [ "=" VariableInitializer ] ;

INJECT TypeDeclaration : 
    import java.util.*;
    import PARSER_PACKAGE.Token.TokenType;
{
    default void addElements(List<ClassOrInterfaceBodyDeclaration> elements) {
        Set<String> keys = new HashSet<String>();
        for (ClassOrInterfaceBodyDeclaration decl : elements) {
            if (decl instanceof MethodDeclaration) {
                keys.add(((MethodDeclaration)decl).getFullSignature());
            }
        }
        //REVISIT. fix token chaining
        for (Iterator<Node> it = getBody().iterator(); it.hasNext();) {
            Node n = it.next();
            if (n instanceof MethodDeclaration) {
                String s = ((MethodDeclaration) n).getFullSignature();
                if (keys.contains(s)) {
                    it.remove();
                }
            }
        }
        getBody().prepend(elements);
    }
    
    default void addAnnotations(Set<Annotation> annotations) {
       Node parent = this.getParent();
       int index = parent.indexOf(this);
       //REVISIT. fix token chaining
       for (Annotation annotation : annotations) {
           parent.addChild(index, annotation);
       }
    } 
    
    default boolean isClass() {
        return firstChildOfType(TokenType.CLASS) != null;
    }
    
    default void addImplements(ObjectType type) {
        ImplementsList implementsList = getImplementsList();
        if (implementsList == null) {
           implementsList = new ImplementsList();
           ListIterator<Node> iterator = iterator();
           while (iterator.hasNext()) {
              Node node = iterator.next();
              if (node instanceof ClassOrInterfaceBody || node instanceof EnumBody)
                  break; 
           }
           iterator.previous();
           iterator.add(implementsList);
        }
        implementsList.addType(type);
    }

    default void addExtends(ObjectType type) {
        ExtendsList extendsList = getExtendsList();
        if (extendsList == null) {
            extendsList = new ExtendsList();
            ListIterator<Node> iterator = iterator();
            while (iterator.hasNext()) {
                Node node = iterator.next();
                if (node instanceof ImplementsList || node instanceof ClassOrInterfaceBody) {
                    break;
                }
            }
            iterator.previous();
            iterator.add(extendsList);
        }
        extendsList.addType(type, this instanceof InterfaceDeclaration);
    }
}

INJECT ExtendsList : 
     import java.util.*;
{
    //REVISIT. fix token chaining 
    
      public void addType(ObjectType type, boolean isInterface) {
        if (!isInterface) {
            clearChildren();
        }
        ListIterator<Node> iterator = iterator();
        if (!iterator.hasNext()) {
            iterator.add(Token.newToken(EXTENDS, "extends", this.getTokenSource()));
            iterator.next();
            iterator.add(type);
        } else {
            while (iterator.hasNext()) {
                if (type.equals(iterator.next())) 
                    return;
            }
            iterator.add(Token.newToken(COMMA, ",", this.getTokenSource()));
            iterator.next();
            iterator.add(type);
        }
    }
}

INJECT TypeParameters : 
    import java.util.*;
{
    // REVISIT. fix token chaining?
    public void add(TypeParameter param) {
        if (!getParameters().contains(param)) {
            ListIterator<Node> iterator = iterator();
            while(iterator.hasNext()) {
                iterator.next();
            }
            iterator.previous();
            iterator.add(Token.newToken(COMMA, ",", this.getTokenSource()));
            iterator.next();
            iterator.add(param);
        }
    }

    // REVISIT. fix token chaining 
    public void add(TypeParameters params) {
        for (TypeParameter param : params.getParameters()) {
            add(param);
        }
    }
}

INJECT ClassOrInterfaceBody : 
    import java.util.*;
{
    
    // REVISIT. fix token chaining?
    public void prepend(List<ClassOrInterfaceBodyDeclaration> elements) {
        ListIterator<Node> iterator = iterator();
        Node n = null;
        while (iterator.hasNext()) {
            n = iterator.next();
              if (n instanceof Token) {
              Token t = (Token) n;
               if (t.getType() == LBRACE) {
                   break;
               }
              }
        }
        for (ClassOrInterfaceBodyDeclaration elem : elements) {
            iterator.add(elem);
            iterator.next();
        }
    }
    
    // REVISIT. fix token chaining 
    public void removeDuplicateMethods() {
        Set<String> sigs = new HashSet<String>();
        ListIterator<Node> decls = iterator();
        while (decls.hasNext()) {
           Node n = decls.next();
           if (n instanceof MethodDeclaration) {
               MethodDeclaration decl = (MethodDeclaration) n;
               String sig = decl.getFullSignature();
               if (sig != null) {
                    if (sigs.contains(sig)) {
                        decls.remove();
                    } else {
                        sigs.add(sig);
                    }
               }
           }
        }
    }
}

INJECT FieldDeclaration : 
   import java.util.*;
{

  /**
   * @return the Identifier nodes that correspond to the 
   *          declaration of an instance variable. 
   */
  public List<Identifier> getVariableIds() {
     return descendants(Identifier.class, FieldDeclaration::isVariableDeclarator);
  }

  static boolean isVariableDeclarator(Identifier id) {
      Node parent = id.getParent();
      return parent instanceof VariableDeclaratorId || 
             parent instanceof VariableDeclarator ||
             parent instanceof FieldDeclaration;
  }
}


INJECT PARSER_CLASS : {

    private EnumSet<TokenType> CongoCCKeyWords = EnumSet.of(
       _FAIL, _ENSURE, _SCAN, _IGNORE_CASE, 
       _TOKEN, _CONTEXTUAL_KEYWORD, _UNPARSED, _SKIP, _MORE,
       _ATTEMPT, _RECOVER, _ON_ERROR,  
       _LEXICAL_STATE);

    private Token TOKEN_HOOK(Token t) {
        if (CongoCCKeyWords.contains(t.getType())) {
            if (isInProduction("CompilationUnit", "ClassOrInterfaceBody", "BlockStatement", "TreeBuildingAnnotation")) {
                Token id = Token.newToken(IDENTIFIER, t.getImage(), token_source);
                id.copyLocationInfo(t);
                return id;
            }
        }
        t.setGrammar(getGrammar());
        return t;
    }
}

INJECT MethodDeclaration : 
{
    public String getName() {
        return firstChildOfType(Identifier.class).toString();
    }
    
    public FormalParameters getFormalParameters() {
        return firstChildOfType(FormalParameters.class);
    }
    
    public String getFullSignature() {
        StringBuilder buf = new StringBuilder();
        buf.append(getName());
        for (Type type : getFormalParameters().childrenOfType(Type.class)) {
            buf.append("#");
            buf.append(type);
        }
        return buf.toString();
    }
}

INJECT VariableDeclarator : {
   public String getName() {
       return firstDescendantOfType(Identifier.class).getImage();
   }
}

INJECT ThrowsList : 
    import java.util.List;
    import java.util.ArrayList;
{
    public List<Node> getTypes() {
        return new ArrayList<Node>(childrenOfType(ObjectType.class));
    }    
}

INJECT Identifier : 
{
    private String tokenHookName, resetTokenHookName, openHookName, closeHookName;

    public String getNormalizedText() {
        String image = getImage();
        if (image.equals("jjtThis") || image.equals("CURRENT_NODE")) { 
            return getGrammar().getTemplateGlobals().getCurrentNodeVariableName();
        }
        if (image.equals("PARSER_CLASS")) {
            return getAppSettings().getParserClassName();
        }
        if (image.equals("LEXER_CLASS")) {
            return getAppSettings().getLexerClassName();
        }
        if (image.equals("BASE_NODE_CLASS")) {
            return getAppSettings().getBaseNodeClassName();
        }
        if (image.equals("BASE_TOKEN_CLASS")) {
            return getAppSettings().getBaseTokenClassName();
        }
        if (image.equals("NODE_PACKAGE")) {
            return getAppSettings().getNodePackage();
        }
        if (image.equals("PARSER_PACKAGE")) {
            return getAppSettings().getParserPackage();
        }
        if (image.equals("TOKEN_HOOK")) {
            if (tokenHookName ==null) {
                String prefix = getAppSettings().generateIdentifierPrefix("tokenHook");
                tokenHookName = getAppSettings().generateUniqueIdentifier(prefix, this);
            }
            return tokenHookName;
        }
        if (image.equals("RESET_TOKEN_HOOK")) {
            if (resetTokenHookName == null) {
                String prefix = getAppSettings().generateIdentifierPrefix("resetTokenHook");
                resetTokenHookName = getAppSettings().generateUniqueIdentifier(prefix, this);
            }
            return resetTokenHookName;
        }
        if (image.equals("OPEN_NODE_HOOK")) {
            if (openHookName == null) {
                String prefix = getAppSettings().generateIdentifierPrefix("openNodeHook");
                openHookName = getAppSettings().generateUniqueIdentifier(prefix, this);
            }
            return openHookName;
        }
        if (image.equals("CLOSE_NODE_HOOK")) {
            if (closeHookName == null) {
                String prefix = getAppSettings().generateIdentifierPrefix("closeNodeHook");
                closeHookName = getAppSettings().generateUniqueIdentifier(prefix, this);
            }
            return closeHookName;
        }
        return image;
   }
}

INJECT interface Node :
   import org.congocc.core.Grammar;
{
    Grammar getGrammar();
    void setGrammar(Grammar grammar);
    default Node getNamedChild(String name) { return null; }
    default void setNamedChild(String name, Node node) {}
    default  List<Node> getNamedChildList(String name) { return null; }
    default void addToNamedChildList(String name, Node node) {}
}


INJECT Token :
    import org.congocc.app.AppSettings;
    import org.congocc.app.Errors;
    import org.congocc.core.Grammar;
{
    private Grammar grammar;

    public Grammar getGrammar() {
        if (grammar == null) {
           if (parent != null) {
              grammar = parent.getGrammar();
           }
        }
        return grammar;
    }

    public void setGrammar(Grammar grammar) {
         this.grammar = grammar;
    }

    public AppSettings getAppSettings() {
        return getGrammar().getAppSettings();
    }

    public Errors getErrors() {
        return getGrammar().getErrors();
    }
    
    public String getNodeName() {
        return getType().toString();
    }
    
    public String getLeadingComments() {
        Token specialToken = getPreviousToken() == null || !getPreviousToken().isUnparsed() ? null : getPreviousToken();
        if (specialToken == null)
            return "";
        StringBuilder buf = new StringBuilder();
        Token tok = specialToken;
        while (tok.getPreviousToken() != null && tok.getPreviousToken().isUnparsed()) {
            tok = tok.getPreviousToken();
        }
        while (tok != this && tok != null) {
            buf.append(tok);
            tok = tok.getNext();
        }
        return buf.toString();
    }
    
    public String getNormalizedText() {
        return getImage();
    }
}

#Root throws IOException #GrammarFile :
{
    TokenProduction tp;
}
   [
      Options
   ]!
   (
      tp=TokenProduction 
      |
      CodeInjection2 
      |
      CodeInjection
      |
      GrammarInclusion =>||
      |
      BNFProduction
  )+!
  <EOF>
  {
        return CURRENT_NODE;
  }
;

INJECT GrammarFile :
{
    @Property String defaultLexicalState;
}

INJECT ReturnType :
    import java.util.List;
{
    public boolean getAsBoolean() {
        List<Token> lt = getRealTokens();
        return lt.size() != 1 || lt.get(0).getType() != VOID;
    }
}

INJECT PARSER_CLASS : {
    private boolean enterIncludes = true, isAlias = false;
    public void setEnterIncludes(boolean enterIncludes) {this.enterIncludes = enterIncludes;}
}

GrammarInclusion throws IOException :
{
   List<String> locations = new ArrayList<>();
   Token includeToken;
}
   ACTIVATE_TOKENS _INCLUDE (<_INCLUDE>)
   {includeToken = lastConsumedToken;}
   (
       (
           <STRING_LITERAL> {locations.add(((StringLiteral)lastConsumedToken).getString());}
           |
           <IDENTIFIER> {locations.add(lastConsumedToken.getImage());}
       )
       (
         "!" 
         (<STRING_LITERAL>|<IDENTIFIER>)
         {
           if (lastConsumedToken instanceof StringLiteral) {
              locations.add(((StringLiteral) lastConsumedToken).getString());
           } else {
               locations.add(lastConsumedToken.getImage());
           }
         }
       )*
       |
       "(" <STRING_LITERAL> {locations.add(((StringLiteral)lastConsumedToken).getString());} ")" 
   )
   [";"]
   {
      if (enterIncludes) {
          Node included = grammar.include(locations, includeToken);
          if (included!=null) {
              CURRENT_NODE.addChild(included);
          } else {
              getErrors().addWarning(CURRENT_NODE, "File is already included.");
          }
      }
   }
;

#CodeInjection :
{
    boolean isInterface = false;
    Annotation annotation = null;
    boolean foundOptionalInitialBrace = false;
    boolean usingParentheses = false;
    ImportDeclaration id;
    ObjectType ot;
    Annotation ann;
    ClassOrInterfaceBody coib;
}   
        ACTIVATE_TOKENS _INJECT (<_INJECT>) ["(" {usingParentheses = true;}]
        [
            "class"
            |
            "interface" {isInterface = true;}
        ]
        <IDENTIFIER> {CURRENT_NODE.name = lastConsumedToken.toString();} 
        [
            SCAN {usingParentheses} => ")"
        ]
        ":"
        =>|+1
        [
          SCAN "{" ("}" | "import" | "extends" | "implements" | (Annotation)* "}") => "{"
          {foundOptionalInitialBrace=true;}
        ]
        (
            id=ImportDeclaration {CURRENT_NODE.importDeclarations.add(id);}
        )*
        (
            ann=Annotation {CURRENT_NODE.annotations.add(ann);}
        )*
        [
             "extends" 
             ot=ObjectType {CURRENT_NODE.addExtendsType(ot);}
             (SCAN 1 {isInterface} => "," ot=ObjectType {CURRENT_NODE.addExtendsType(ot);})*
             [";"]
        ]
        [
             SCAN 1 {!isInterface} =>
             "implements" ot=ObjectType {CURRENT_NODE.addImplementsType(ot);}
             ("," ot=ObjectType {CURRENT_NODE.addImplementsType(ot);})*
             [";"]
        ]
        [
           SCAN 0 {foundOptionalInitialBrace} => "}"
        ]
        [coib=ClassOrInterfaceBody {CURRENT_NODE.body = coib;}]
        {
                if (enterIncludes) {
                    grammar.addCodeInjection(CURRENT_NODE);
                }
                return CURRENT_NODE;
        }
;

INJECT CodeInjection : 
   import java.util.List;
   import java.util.ArrayList;
   import org.congocc.core.Grammar;
{
   public String name;
   public List<ImportDeclaration> importDeclarations = new ArrayList<ImportDeclaration>();
   public List<Annotation> annotations = new ArrayList<>();
   public List<ObjectType> extendsList = new ArrayList<>();
   public List<ObjectType> implementsList = new ArrayList<>();
   public ClassOrInterfaceBody body; 
   public boolean isInterface;
   
   public static void inject(Grammar grammar, String nodeName, String injection) {
        String inject = "INJECT " + nodeName + " : " + injection;
        CongoCCParser parser;
        try {
            parser = new CongoCCParser(grammar, "dynamicInjection", inject);
            parser.setEnterIncludes(true);
            CodeInjection ci = parser.CodeInjection();
            grammar.getInjector().add(ci);
        } catch (Exception e) {
            //FIXME: need something better here!
            System.err.println("parser exception: " + e.getLocalizedMessage());
        } finally {
            parser = null;
        }        
   }

   public void addExtendsType(ObjectType type) {extendsList.add(type);}
   public void addImplementsType(ObjectType type) {implementsList.add(type);}
   
}

CodeInjection2 :
{
        CompilationUnit jcu;
}
        ACTIVATE_TOKENS _INJECT (<_INJECT>)
        ":" =>|| "{"
        jcu=CompilationUnit
       "}"
        {
                if (enterIncludes) {
                    grammar.addCodeInjection(jcu);
                }
        }
;

Options# :
    {HashMap<String, Object> settings = new HashMap<>();} 
    Setting(settings) =>||
    (Setting(settings))*
    {grammar.setSettings(settings);}
;

Setting(Map<String,Object> settings) #Setting :
{
      String key;
      Token name;
      Object value = Boolean.TRUE;
}
  ( 
     name = <IDENTIFIER> 
     | 
     name = <_IGNORE_CASE>
     |
     name = <_DEACTIVATE_TOKENS>
  )
  =>|+1
  {
      key = name.getImage().toUpperCase();
  }
  [
     "="
     (
        "true" {value=true;}
        |
        "false" {value=false;}
        |
        <INTEGER_LITERAL> {value = ((IntegerLiteral) lastConsumedToken).getValue();}
        |
        <STRING_LITERAL> {value = ((StringLiteral) lastConsumedToken).getString();}
        |
        SCAN <IDENTIFIER> "."
        =>Name {value = peekNode().toString();}
        |
        <IDENTIFIER> {value = lastConsumedToken.getImage();}
        [ <HASH> <IDENTIFIER> { value += "#" + lastConsumedToken.getImage();} ]
        ("," {value+=",";}
            <IDENTIFIER> {value+=lastConsumedToken.getImage();}
            [ <HASH> <IDENTIFIER> { value += "#" + lastConsumedToken.getImage();} ]
        )* 
     )
  ]
  ";"
  {
      settings.put(key, value);
  }
;

BNFProduction #org.congocc.core.BNFProduction :
{
    TreeBuildingAnnotation tba = null;
    Token firstToken=getToken(1), id;
    Expansion exp;
}
    [
        "public" | "private" | "protected"
    ]
    [
       SCAN ReturnType <IDENTIFIER> => ReturnType
       |
       "#" {CURRENT_NODE.setImplicitReturnType(true);}
    ]
    id=<IDENTIFIER> {CURRENT_NODE.setName(id.getImage());}
    [FormalParameters]
    [
      ThrowsList
    ]
    [
        tba=TreeNodeDescriptor 
        {
            String nodeName = tba.getNodeName();
            if (nodeName == null) nodeName = CURRENT_NODE.getNodeName();
            grammar.addNodeType(CURRENT_NODE.getName(), nodeName);
        }
    ]
    [
        "RECOVER_TO" ExpansionChoice
        {CURRENT_NODE.setRecoveryExpansion((Expansion)peekNode());} 
    ]
    ":"
    [
        SCAN 2 => <IDENTIFIER> 
        {CURRENT_NODE.setLexicalState(lastConsumedToken.getImage());}
        ":"
    ]
    [
        Block 
        {CodeBlock block = (CodeBlock) peekNode();}
        ["#" {block.setAppliesInLookahead(true);}]
        ASSERT ~(";") =>||
    ]
    ExpansionChoice 
    {CURRENT_NODE.setExpansion((Expansion) peekNode());} 
    ";"
    {
        CURRENT_NODE.adjustFirstToken(firstToken);
        if (tba == null && !grammar.getAppSettings().getNodeDefaultVoid()) {
           grammar.addNodeType(CURRENT_NODE.getName(),CURRENT_NODE.getName());
        }
     }
;

TreeNodeDescriptor #TreeBuildingAnnotation :
  "#" (Name|"abstract"|"interface"|"void"|{})
  [
       "("
          [
            (">" | ">=" | "<" | "<=" | "+" | "-")
            {CURRENT_NODE.setInitialShorthand(lastConsumedToken.getImage());}  
          ]
          Expression {CURRENT_NODE.setCondition((Expression) peekNode());}
       ")"
  ]
;

InlineTreeNodeDescriptor #TreeBuildingAnnotation :
  [ 
      <BACKSLASH>
    |
      Name {CURRENT_NODE.setLHS((Name)peekNode());} "=" 
      =>||
  ]
  <HASH> =>|| 
  Name  
  (
    SCAN ~("(") => {}
    |
    "(" (">" | ">=" | "<" | "<=" | "+" | "-") =>||
    {CURRENT_NODE.setInitialShorthand(lastConsumedToken.getImage());}
    [Expression {CURRENT_NODE.setCondition((Expression) peekNode());}] 
    ")"
    |
    "("
    ASSERT ~(ExpansionSequence "|") //A bit kludgy, but we treat this case specially for principle of least surprise.
    Expression {CURRENT_NODE.setCondition((Expression) peekNode());}
    ")"
    // If any of the following tokens are after the closing parenthesesis, this must
    // be an expansion (or the code is just invalid)  
    ASSERT ~(<STAR>|<PLUS>|<HOOK>|<HASH>) 
    =>||
    |
    SCAN "(" ExpansionChoice ")" => {}
    |
    "(" FAIL "Expecting either an expression or an expansion here."
 )
;

INJECT TreeBuildingAnnotation :
{
    @Property String initialShorthand;
    @Property Expression condition;
    @Property Name LHS;
    /**
     * Just returns whatever comes after the hash ("#") including "void", etc.
     */
    public String getNodeName() {
        Token hash = (Token) firstChildOfType(HASH);
        if (hash == null) return null;
        Node nextNode = hash.nextSibling();
        if (nextNode instanceof Name) {
            return nextNode.toString();
        }
        Token nextToken = hash.getNext();
        TokenType nextType = nextToken.getType();
        if (nextType != ABSTRACT 
            && nextType != INTERFACE 
            && nextType != VOID) return null;
        return nextToken.getImage();
    }

    public boolean isNeverInstantiated() {
        return isVoid() || isAbstract() || isInterface();
    }
    
    public boolean getGtNode() {
         return initialShorthand !=null;
    }

    public boolean isAbstract() {
        return "abstract".equals(getNodeName());
    }

    public boolean isInterface() {
        return "interface".equals(getNodeName());
    }
    
    public boolean isVoid() {
        return "void".equals(getNodeName());
    }

    public boolean isFullyQualified() {
        String nodeName = getNodeName();
        return nodeName != null && nodeName.indexOf('.') >0;
    }
}


TokenProduction :
{
    Token t = null;
    String tokenClassName = null;
    String firstSpecifiedLexicalState = null;
    boolean multipleStatesSpecified = false;
    boolean ignoreCase = false;
}
  [
    "<" "*" =>|| ">" {multipleStatesSpecified = true;} 
    |
    "<" <IDENTIFIER>
      {
          firstSpecifiedLexicalState = lastConsumedToken.getImage();
          grammar.addLexicalState(firstSpecifiedLexicalState);
      }
      ("," <IDENTIFIER> {multipleStatesSpecified = true; grammar.addLexicalState(lastConsumedToken.getImage());})*
     ">" 
  ]
  (<_TOKEN> | <_UNPARSED> | <_SKIP> | <_MORE> | <_CONTEXTUAL_KEYWORD>)
  [
    "[" "IGNORE_CASE" {ignoreCase = true;} "]"
  ]
  ["#" <IDENTIFIER> {
    tokenClassName=lastConsumedToken.getImage();
    CURRENT_NODE.setTokenClassName(tokenClassName);
    }
  ] 
  ":"
   RegexpSpec(tokenClassName)
   ( "|" RegexpSpec(tokenClassName) )*
   ";"
   {
      if (!multipleStatesSpecified) {
          if (firstSpecifiedLexicalState == null) {
              firstSpecifiedLexicalState = grammar.getDefaultLexicalState();
          }
          CURRENT_NODE.setImplicitLexicalState(firstSpecifiedLexicalState);
      }
      CURRENT_NODE.setIgnoreCase(ignoreCase || grammar.getAppSettings().isIgnoreCase());
   }
;

INJECT TokenProduction :
    import java.util.*;
    import org.congocc.core.RegexpSpec;
{
    @Property private boolean ignoreCase;
    @Property String tokenClassName;

    private String implicitLexicalState;
    
    public void setImplicitLexicalState(String implicitLexicalState) {
        this.implicitLexicalState = implicitLexicalState;
    }

    public List<RegexpSpec> getRegexpSpecs() {
        return childrenOfType(RegexpSpec.class);
    }

    /**
     * The states in which this regular expression production exists.
     */
    public String[] getLexicalStateNames() {
    
        if (implicitLexicalState != null) {
            return new String[] {implicitLexicalState};
        }        
        if (isInAllLexStates()) {
             return getGrammar().getLexicalStates();
        }
        Set<String> states = new LinkedHashSet<String>();
        for (Token t : childrenOfType(Token.class)) {
            if (t.getType() == HASH) break;
            if (t.getType() == IDENTIFIER) {
                states.add(t.getImage());
            }
        }
        if (states.isEmpty()) {
           return new String[] {getGrammar().getDefaultLexicalState()};
        }
        String[] lexStates = new String[states.size()];
        int i=0;
        for (String s : states) {
           lexStates[i++] = s;
        } 
        return lexStates;
    }

    private boolean isInAllLexStates() {
       for (Node n : children()) {
          if (n instanceof Token) {
          Token t = (Token) n;
              if (t.getType() == STAR) {
                  return true;
              }
          }
       }
       return false;
    }

    public String getKind() {
       for (Token t : childrenOfType(Token.class)) {
           switch (t.getType()) {
              case _MORE : return "MORE";
              case _UNPARSED : return "UNPARSED";
              case _SKIP : return "SKIP";
              case _TOKEN : return "TOKEN";
              default: 
           }
      }
      return "TOKEN";
    }
}

RegexpSpec(String tokenClassName)#org.congocc.core.RegexpSpec :
{
    RegularExpression regexp;
    boolean isPrivate = false;
    String image = "";
}
    (
        RegexpStringLiteral 
        {   regexp = (RegularExpression) peekNode(); 
            ((RegexpStringLiteral) regexp).setLexicalState(getGrammar().getDefaultLexicalState());
        }
        |
        <LT>
        [
            ["#" {isPrivate = true;}]
            <IDENTIFIER> {image = lastConsumedToken.getImage();}
            ":"
        ]
        RegexpChoice 
        {
            regexp = (RegularExpression) peekNode();
            if (regexp instanceof RegexpRef) {
                RegexpSequence seq = new RegexpSequence();
                seq.addChild(regexp);
                pokeNode(seq);
                regexp = seq;
            } 
            regexp.setLabel(image);
            regexp.setGeneratedClassName(image);
            regexp.setPrivate(isPrivate); 
        }
        <GT>
    )
    {
        if (tokenClassName != null) {
            regexp.setGeneratedClassName(tokenClassName);
        }
    }
    [
        "#"<IDENTIFIER>
        {
            regexp.setGeneratedSuperClassName(tokenClassName);
            regexp.setGeneratedClassName(lastConsumedToken.getImage());
        }
    ]
    [
        SCAN 1 {!regexp.isPrivate()} =>
        Block
    ]
    [ 
        SCAN 1 {!regexp.isPrivate()} =>
        ":" <IDENTIFIER> {CURRENT_NODE.setNextLexicalState(lastConsumedToken.getImage());}
    ]
;

ExpansionChoice :
  ExpansionSequence ( "|" ExpansionSequence)*
;

INJECT ExpansionChoice :
   import org.congocc.core.*;
   import java.util.Set;
   extends Expansion
{
    public java.util.List<ExpansionSequence> getChoices() {
        return childrenOfType(ExpansionSequence.class);
    }
    
    @Override
    public TokenSet getFirstSet() {
         if (firstSet == null) {
            firstSet = new TokenSet(getGrammar());
            for (ExpansionSequence choice : childrenOfType(ExpansionSequence.class)) {
                //firstSet.or(choice.getLookaheadExpansion().getFirstSet());
                firstSet.or(choice.getFirstSet());
            }
         }
         return firstSet;
    }
    
    @Override
    public TokenSet getFinalSet() {
        TokenSet finalSet = new TokenSet(getGrammar());
        for (ExpansionSequence choice : childrenOfType(ExpansionSequence.class)) {
            finalSet.or(choice.getFinalSet());
        }
        return finalSet;
    }
    
    @Override
    protected int getMinimumSize(Set<String> usedNonTerminals) {
        int result = Integer.MAX_VALUE;
        for (ExpansionSequence choice : getChoices()) {
            if (choice.isFailure()) continue; // REVISIT
            int choiceMin = choice.getMinimumSize(usedNonTerminals);
            if (choiceMin ==0) return 0;
            result = Math.min(result, choiceMin);
        }
        return result;
    }
 
    @Override
    protected int getMaximumSize(Set<String> usedNonTerminals) {
        int result = 0;
        for (ExpansionSequence exp : getChoices()) {
            result = Math.max(result, exp.getMaximumSize(usedNonTerminals));
            if (result == Integer.MAX_VALUE) break;
        }
        return result;
    }
    
    @Override
    public boolean potentiallyStartsWith(String productionName, java.util.Set<String> alreadyVisited) {
        for (ExpansionSequence seq : getChoices()) {
            if (seq.potentiallyStartsWith(productionName, alreadyVisited)) return true;
            if (seq.isEnteredUnconditionally()) break;
        }
        return false;
    }

    @Override
    public boolean isSingleTokenLookahead() {
        if (!super.isSingleTokenLookahead()) return false;
        for (ExpansionSequence exp : childrenOfType(ExpansionSequence.class)) {
            if (!exp.isSingleTokenLookahead()) return false;
        }
        return true;
    }
    
    @Override
    public boolean startsWithLexicalChange() {
        return getChoices().stream().anyMatch(ExpansionSequence::startsWithLexicalChange);
    }    
}


ExpansionWithParentheses :
{
    Token lparen = null;
    LexicalStateSwitch lss=null;
}
   [lss=LexicalStateSwitch | TokenActivation]
   lparen ="(" =>|| ExpansionChoice {Expansion nested = (Expansion) peekNode();} ")"
   [
       "*" {CURRENT_NODE = new ZeroOrMore();}
       |
       "?" {CURRENT_NODE = new ZeroOrOne();}
       |
       "+" {CURRENT_NODE = new OneOrMore();}
   ]
   [
       SCAN ~\...\Lookahead => 
       "!" 
       {
           if (CURRENT_NODE instanceof ZeroOrOne) {
               nested.setTolerantParsing(true);
           } else {
               CURRENT_NODE.setTolerantParsing(true);
           }
       }
   ]
   [UpToHere(CURRENT_NODE)]
   {
       Node startNode = lss != null ? lss : lparen;
       CURRENT_NODE.copyLocationInfo(startNode, lastConsumedToken);
   }
;


INJECT ExpansionWithParentheses : 
   import org.congocc.core.*; 
   import org.congocc.core.ExpansionSequence.*;
   extends ExpansionWithNested
   implements SyntaxElement
{
    @Override 
    public String getSpecifiedLexicalState() {
        LexicalStateSwitch lss = firstChildOfType(LexicalStateSwitch.class);
        return lss == null ? super.getSpecifiedLexicalState() : lss.getLexicalStateName();
    }

    @Override 
    public boolean startsWithLexicalChange() {
        return firstChildOfType(LexicalStateSwitch.class) != null || firstChildOfType(TokenActivation.class) != null
              || getNestedExpansion().startsWithLexicalChange();
    }

    @Override 
    public boolean isSingleTokenLookahead() {
         return super.isSingleTokenLookahead() && getNestedExpansion().isSingleTokenLookahead();
    }
}

ExpansionSequence #org.congocc.core.ExpansionSequence :
{
   Expansion sub;
   Lookahead la = null;
}
  [ 
    SCAN ~\...\Lookahead 
    =>
    la=Lookahead  =>||
    {
       la.setExpansion(CURRENT_NODE);
       CURRENT_NODE.setLookahead(la);
     }
  ]
  (
     ExpansionUnit
  )+!
;

INJECT Assertion :
   import org.congocc.core.Expansion;
   extends org.congocc.core.EmptyExpansion 
{
    @Property Expression assertionExpression, messageExpression;
    @Property Expansion expansion;
    @Property boolean expansionNegated, semanticLookaheadNested;


    @Override 
    public boolean startsWithGlobalCodeAction() {
        return expansion != null || semanticLookaheadNested;
    }
}

Assertion :
   "ASSERT"
   (
    "{" 
       Expression 
       {CURRENT_NODE.setAssertionExpression((Expression) peekNode());}
    "}"
    ["#" {CURRENT_NODE.setSemanticLookaheadNested(true);}]
    |
    ["~" {CURRENT_NODE.setExpansionNegated(true);}] 
    "(" 
    ExpansionChoice {CURRENT_NODE.setExpansion((Expansion) peekNode());}
    ")"
   )
   [
       ":" Expression {CURRENT_NODE.setMessageExpression((Expression)peekNode());}
       [":"]
   ]
   [UpToHere(CURRENT_NODE)]
;

#Lookahead# : 
{
   Token amountToken=null;
   boolean hasSemanticLookahead = false, hasExplicitNumericalLookahead=false;
   Expansion expansion = null;
   Expression exp=null;
   Name name = null;
   Node lb = null;
}
[name=Name "=" =>|| {CURRENT_NODE.setLHS(name);}]
<_SCAN>
[
    <INTEGER_LITERAL> {hasExplicitNumericalLookahead = true;}
]
[
    "{" 
    exp=Expression {hasSemanticLookahead = true; CURRENT_NODE.setSemanticLookahead(exp);}
    "}"
    ["#" {CURRENT_NODE.setSemanticLookaheadNested(true);}]
]
[LookBehind =>|| {lb = peekNode();}]
[
    SCAN {!hasExplicitNumericalLookahead} => 
    ["~" {CURRENT_NODE.setNegated(true);}] 
    ExpansionChoice {expansion = (Expansion) peekNode();}
    <RIGHT_ARROW> =>||
    {
       CURRENT_NODE.setNestedExpansion(expansion);
    }
]
(
    SCAN {expansion == null} => <RIGHT_ARROW>
    |
    SCAN {expansion != null || (exp ==null && lb == null)} => {}
)
{return CURRENT_NODE;}
;

INJECT Lookahead :
    import org.congocc.core.Expansion;
{
    @Property Name LHS;
    @Property Expansion expansion, nestedExpansion;
    @Property boolean negated, semanticLookaheadNested;
    @Property Expression semanticLookahead;

    public boolean getRequiresScanAhead() {
        if (!getLookaheadExpansion().isPossiblyEmpty()) return true;
        if (getSemanticLookahead() != null) return true;
        if (this.getLookBehind()!=null) return true;
        return getAmount() >0;
    }

    public boolean hasSemanticLookahead() {
        return getSemanticLookahead() != null;
    }
    
    public Expansion getLookaheadExpansion() {
        Expansion result = getNestedExpansion();
        if (result != null) {
            return result;
        }
        return expansion;
    }

    public boolean getHasExplicitNumericalAmount() {
        return firstChildOfType(TokenType.INTEGER_LITERAL) != null;
    }

    public int getAmount() {
        IntegerLiteral it = firstChildOfType(IntegerLiteral.class);
        if (it!=null) return it.getValue();
        if (nestedExpansion !=null || expansion.getHasScanLimit()) return Integer.MAX_VALUE;
        return 1;
    }

    public LookBehind getLookBehind() {
        return firstChildOfType(LookBehind.class);
    }    
}

LookBehind : 
   [<TILDE> {CURRENT_NODE.setNegated(true);}] 
   (LookBehindForward | LookBehindBackward)
;

LookBehindForward #void :
   (
       <SLASH>
       (
         ([<TILDE>]<IDENTIFIER>)
         |
         (<DOT>|<VAR_ARGS>)
       )
   )+
   [<BACKSLASH>]
;

LookBehindBackward #void :
   (
       <BACKSLASH>
       (
          ([<TILDE>]<IDENTIFIER>)
          |
          (<DOT>|<VAR_ARGS>)
       )
   )+
   [<SLASH>]
;

INJECT LookBehind :
import java.util.*;
{
    @Property boolean negated;

    public boolean isBackward() {
        return getChild(0) instanceof Backslash || getChild(1) instanceof Backslash;
    }

    public boolean getHasFinalEllipsis() {
        Token t = (Token) getChild(getChildCount() -1);
        return t.getImage().equals("...");
    }

    public List<String> getPath() {
        ArrayList<String> result = new ArrayList<>();
        boolean negated = false;
        for (Token t : childrenOfType(Token.class)) {
            String img = t.getImage();
            if (img.charAt(0) == '\\' || img.charAt(0)=='/') {
                negated = false;
                continue;
            } 
            if (img.equals("~")) {
                negated = true;
                continue;
            }
            if (negated) {
                result.add("~" + img);
            } else {
               result.add(img);
            }
            negated = false;
        }
        if (result.get(0).equals("~")) {
            result.remove(0);
        }
        return result;
    }

    public boolean getHasEndingSlash() {
        Token lastToken = (Token) getChild(getChildCount()-1);
        String img = lastToken.getImage();
        return img.equals("\\") || img.equals("/");
    }

    private String routineName;
    
    public String getRoutineName() {
        if (routineName == null) {
            String prefix = getAppSettings().generateIdentifierPrefix("backscan");
            routineName = getAppSettings().generateUniqueIdentifier(prefix, this);
        }
        return routineName;
    }
}


ChildNameInfo(Expansion expansion) : //#void :
{
    String name;
    boolean multiple = false;
}
  // TODO these delimiters are provisional - agreement needed on final form
  "/"
  (
    <IDENTIFIER> { name = ((Token) peekNode()).getImage(); }
    |
    ( "["
      <IDENTIFIER> { name = ((Token) peekNode()).getImage(); multiple = true; }
    "]" )
  )
  "/"
  {
    expansion.setChildName(name);
    expansion.setMultipleChildren(multiple);
  }
;

ExpansionUnit #void :
 (
  UncacheTokens
  |
  Failure
  |
  Block {CodeBlock block = (CodeBlock) peekNode();}
  [
    "#" 
    {
        block.setAppliesInLookahead(true);
        popNode();
    }
  ]
  |
  UnparsedCodeBlock // Currently unused
  |
  SCAN 1 ~\...\Lookahead => AttemptBlock
  |
  SCAN 1 ~\...\Lookahead => TryBlock
  |
  Assertion
  |
  ExpansionWithParentheses 
  |
  ZeroOrOne 
  |
  Terminal 
  |
  NonTerminal
  |
  FAIL
 )
 {Expansion result = (Expansion) peekNode();}
 [
    SCAN ~\...\Lookahead => 
    InlineTreeNodeDescriptor =>||
    { result.setTreeNodeBehavior((TreeBuildingAnnotation) peekNode()); }
 ]
;

#NonTerminal #org.congocc.core.NonTerminal :
  [
    Name {CURRENT_NODE.setLHS((Name)peekNode());} "=" 
    =>||
  ]
  <IDENTIFIER>
  =>||
  [
    SCAN "(" ExpansionSequence "|" => {}
    |
    SCAN "(" ExpansionChoice ")" ("*"|"+"|"?") => {}
    |
    InvocationArguments =>||
  ]
  [
     SCAN ~\...\Lookahead =>
     "!"
     {CURRENT_NODE.setTolerantParsing(true);}
  ]
  [ChildNameInfo(CURRENT_NODE)] 
  [UpToHere(CURRENT_NODE)]
  {return CURRENT_NODE;}
;

Terminal# :
  SCAN [Name "="] (<STRING_LITERAL>|<CHARACTER_LITERAL>|<SINGLE_QUOTE_STRING>|"<")
  =>
  [
    SCAN ~\...\Lookahead Name "=" =>
    Name {CURRENT_NODE.setLhs((Name) peekNode());}
    "="
  ]
  ACTIVATE_TOKENS _EOF(RegexpStringLiteral | RegexpRef | EndOfFile ) 
  {
      RegularExpression result = (RegularExpression) peekNode();
      if (result instanceof RegexpStringLiteral) {
            ((RegexpStringLiteral) result).setLexicalState(grammar.getDefaultLexicalState());
      }
      CURRENT_NODE.setRegexp(result);
      CURRENT_NODE.setLabel(result.getLabel());
  }
  [
      SCAN ~\...\Lookahead
      => "!"
      {
          CURRENT_NODE.setTolerantParsing(true);
      }
  ]
  [
      ChildNameInfo(CURRENT_NODE)
  ] 
  [
    UpToHere(CURRENT_NODE)
  ]
;

INJECT Terminal :
   import org.congocc.core.*;
   import org.congocc.core.ExpansionSequence.*;
   import java.util.Set;
   extends Expansion
   implements SyntaxElement
{
    @Property RegularExpression regexp;
    @Property Name lhs;
    @Property String label;

    public int getOrdinal() {
        return regexp.getOrdinal();
    }

    public int getMinimumSize(Set<String> unused) {return 1;}

    public int getMaximumSize(Set<String> unused) {return 1;}

    public TokenSet getFirstSet() {
        if (firstSet == null) {
            firstSet = new TokenSet(getGrammar());
            firstSet.set(getOrdinal());
        }
        return firstSet;
    }

    public TokenSet getFinalSet() {return getFirstSet();}
}   

UpToHere(Expansion exp) #void :
   <UP_TO_HERE>
   {
       String img = lastConsumedToken.getImage();
       exp.setScanLimit(true);
       int lastChar = img.codePointBefore(img.length());
       if (Character.isDigit(lastChar)) {
           exp.setScanLimitPlus(lastChar - '0');
       }
   }
;

//The following two productions are not actually used. These constructs are now 
// handled by ExpansionWithParentheses so the following two productions
// are not actually used. They have to be there so that the ZeroOrMore and
// OneOrMore types get defined. REVISIT. Need a way of defining Node subtypes
// without creating a dummy grammar rule for them.
ZeroOrMore : "(" ExpansionChoice ")" "*";
OneOrMore : "(" ExpansionChoice ")" "+"; 

//This production just matches the square bracket syntax. 
// The (...)? syntax is handled by ExpansionWithParentheses
ZeroOrOne : 
    [LexicalStateSwitch | TokenActivation]
    "[" =>|| ExpansionChoice {Expansion exp = (Expansion) peekNode();} "]"
     ["!" {exp.setTolerantParsing(true);}]
     [UpToHere(CURRENT_NODE)]
;

INJECT ZeroOrOne : 
     import org.congocc.core.Expansion;
     import org.congocc.core.TokenSet;
     extends ExpansionWithParentheses 
{
    @Override
    protected int getMinimumSize(java.util.Set<String> unused) {return 0;}
}


INJECT ZeroOrMore : 
     import org.congocc.core.Expansion;
     import org.congocc.core.TokenSet;
     import java.util.Set;
     extends ExpansionWithParentheses 
{
    @Override  
    protected int getMinimumSize(Set<String> unused) {return 0;}
    
    @Override
    protected int getMaximumSize(Set<String> unused) {return Integer.MAX_VALUE;}
}


INJECT OneOrMore : 
     import org.congocc.core.Expansion;
     import org.congocc.core.TokenSet;
     extends ExpansionWithParentheses 
{
    @Override 
    protected int getMaximumSize(java.util.Set<String> unused) {return Integer.MAX_VALUE;}
}


AttemptBlock : 
 "ATTEMPT" ExpansionChoice "RECOVER"  (ExpansionWithParentheses | Block)
;

INJECT AttemptBlock : 
   import java.util.List;
   import org.congocc.core.Expansion;
   import org.congocc.core.TokenSet;
   extends org.congocc.core.ExpansionWithNested;
{
    public Expansion getRecoveryExpansion() {
       return (Expansion) getChild(3);
    }
}

UncacheTokens# : "UNCACHE_TOKENS" ;   

INJECT UncacheTokens : extends org.congocc.core.EmptyExpansion;

Failure# : 
   {
       Expression exp = null;
   }
   "FAIL"
   [
      [":"]
      exp=Expression 
      |
      Block
   ]
   {
       CURRENT_NODE.setExp(exp);
   }
;

INJECT Failure :
   extends org.congocc.core.EmptyExpansion
{
    @Property Expression exp;
    
    public CodeBlock getCode() {
        return firstChildOfType(CodeBlock.class);
    }
}

LexicalStateSwitch : "LEXICAL_STATE" <IDENTIFIER> ;

INJECT LexicalStateSwitch : {
   public String getLexicalStateName() {
       return firstChildOfType(Identifier.class).getImage();
   }
}

TokenActivation : 
   ("ACTIVE_TOKENS" | "ACTIVATE_TOKENS" | "DEACTIVATE_TOKENS" {CURRENT_NODE.setDeactivate(true);})
   ["+"|"-"] <IDENTIFIER>
   ([","] ["+"|"-"] <IDENTIFIER>)*
;

INJECT TokenActivation : 
   import java.util.List;
   import java.util.ArrayList;
{
    @Property boolean deactivate;
    public List<String> getTokenNames() {
        List<String> result = new ArrayList<>();
        for (Identifier id : childrenOfType(Identifier.class)) {
            result.add(id.getImage());
        }
        return result;
    }

    public List<String> getDeactivatedTokens() {
        List<String> result = new ArrayList<>();
        for (Identifier id : childrenOfType(Identifier.class)) {
            if (id.getPrevious().getType() == MINUS) {
                result.add(id.getImage());
            }
            else if (isDeactivate() && id.getPrevious().getType() != PLUS) {
                result.add(id.getImage());
            }
        }
        return result;
    }

    public List<String> getActivatedTokens() {
        List<String> result = new ArrayList<>();
        for (Identifier id : childrenOfType(Identifier.class)) {
            if (id.getPrevious().getType() == PLUS) {
                result.add(id.getImage());
            }
            else if (!isDeactivate() && id.getPrevious().getType() != MINUS) {
                result.add(id.getImage());
            }
        }
        return result;
    }
}


TryBlock : 
    "try" "{" ExpansionChoice "}"
    (
        CatchBlock
    )*
    [
        FinallyBlock
    ]
;

INJECT TryBlock  : 
    extends org.congocc.core.ExpansionWithNested;
{
    public java.util.List<CatchBlock> getCatchBlocks() {
        return childrenOfType(CatchBlock.class);
    }

    public FinallyBlock getFinallyBlock() {
        return firstChildOfType(FinallyBlock.class);
    }
    
}

INJECT CodeBlock :
   extends org.congocc.core.EmptyExpansion;
{
    @Property boolean appliesInLookahead;

    public CodeBlock getJavaCode() {
        return this;
    }

    @Override 
    public boolean startsWithGlobalCodeAction() {
        return isAppliesInLookahead();
    }
}

RegexpStringLiteral# :
   (
    <STRING_LITERAL>
    |<CHARACTER_LITERAL> {CURRENT_NODE.setSingleQuoted(true);}
    |<SINGLE_QUOTE_STRING> {CURRENT_NODE.setSingleQuoted(true);}
   )
   {
      String image = StringLiteral.removeEscapesAndQuotes(lastConsumedToken.getImage());
      CURRENT_NODE.setLiteralString(image);
   }
;

INJECT RegexpStringLiteral : 
   import org.congocc.core.*;
   extends RegularExpression;
{
  @Property String literalString, lexicalState;
  @Property boolean singleQuoted;
  @Property RegexpStringLiteral canonicalRegexp;

  public String toString() {
    return super.toString() + " - " + getLiteralString();
  }

  public int getOrdinal() {
      if (canonicalRegexp != null) {
        return canonicalRegexp.getOrdinal();
      }
      return super.getOrdinal();
  }  

  public String getLabel() {
     if (canonicalRegexp != null) {
        return canonicalRegexp.getLabel();
     }
     return super.getLabel();
  }
  
  public int hashCode() {
      return literalString.hashCode();
  }

  @Override 
  public boolean matchesEmptyString() {
      return literalString.length() == 0;
  }

  public String[] getLexicalStateNames() {
     TokenProduction tp = getTokenProduction();
     return tp != null ? tp.getLexicalStateNames() : new String[]{lexicalState};
  }
}

#RegexpRef : 
{
   Token t;
}
    "<"
    t=<IDENTIFIER> =>||
    DEACTIVATE_TOKENS RSIGNEDSHIFT, RUNSIGNEDSHIFT (">") 
    {
       CURRENT_NODE.setLabel(t.getImage());
       return CURRENT_NODE;
    }
;

INJECT RegexpRef : 
    import org.congocc.core.*;
    extends RegularExpression;
{
    @Property RegularExpression regexp;

    public boolean isPrivate() {
        return regexp!= null && regexp.isPrivate(); 
    }

    @Override 
    public boolean matchesEmptyString() {
        return regexp != null && regexp.matchesEmptyString();
    }

    @Override 
    public int getOrdinal() {
        if (regexp == null) {
            // This is the case if this RegexpRef refers to a token type
            // specified in the EXTRA_TOKENS
            int extraTokensIndex = getGrammar().getAppSettings().getExtraTokenNames().indexOf(getLabel());
            assert extraTokensIndex >=0;
            return extraTokensIndex + getGrammar().getLexerData().getRegularExpressions().size();
        }
        return regexp.getOrdinal();
    }
}

EndOfFile : "<" <_EOF> =>|| ">" ;

INJECT EndOfFile : extends org.congocc.core.RegularExpression
{
    @Override 
    public boolean matchesEmptyString() {return true;}
}

RegexpChoice :
    RegexpSequence 
    ("|" RegexpSequence)*
;

RegexpChoiceInParen #RegexpChoice : 
   "(" RegexpSequence ("|" RegexpSequence)* ")"
;

INJECT RegexpChoice : 
    import java.util.List;
    import org.congocc.core.RegularExpression;
    extends RegularExpression;
{
    public List<RegularExpression> getChoices() {
        return childrenOfType(RegularExpression.class);
    }

    @Override 
    public boolean matchesEmptyString() {
        for (RegularExpression choice: getChoices()) {
            if (choice.matchesEmptyString()) {
                return true;
            }
        }
        return false;
    }
}

RegexpSequence :
   (
      RegexpStringLiteral
      |
      RegexpRef
      |
      CharacterList
      |
      RepeatedRegexp
   )+
;

INJECT RegexpSequence : 
   import java.util.*;
   import org.congocc.core.RegularExpression;
   extends RegularExpression;
{

   public List<RegularExpression> getUnits() {
       return childrenOfType(RegularExpression.class);
   }

   @Override 
   public boolean matchesEmptyString() {
       for (RegularExpression child : getUnits()) {
           if (!child.matchesEmptyString()) return false;
       }
       return true;
   }
}

RepeatedRegexp #void : 
{
     int r1 = 0, r2 = -1;
}
  RegexpChoiceInParen
  (  "+" #OneOrMoreRegexp(2) 
   | "*" #ZeroOrMoreRegexp(2)
   | "?" #ZeroOrOneRegexp(2) 
   | (
      "{" <INTEGER_LITERAL> {r1 = ((IntegerLiteral)lastConsumedToken).getValue();}
           [ "," [ <INTEGER_LITERAL> {r2=((IntegerLiteral)lastConsumedToken).getValue();} ] ]
       "}"
     ) #RepetitionRange(+1) 
     {
         RepetitionRange range = (RepetitionRange) peekNode();
         range.setMin(r1);
         range.setMax(r2);
     }
  )?
;

INJECT RepetitionRange : 
   import org.congocc.core.RegularExpression;
   extends RegularExpression;
{
    @Property int min = 0, max = -1;

    public boolean hasMax() {
        return firstChildOfType(COMMA) != null;
    }
    
    public RegularExpression getRegexp() { 
        return firstChildOfType(RegularExpression.class);
    }

    @Override
    public boolean matchesEmptyString() {
        return min==0 || getRegexp().matchesEmptyString();
    }
}

INJECT OneOrMoreRegexp : 
   import org.congocc.core.RegularExpression;
   extends RegularExpression;
{
   public RegularExpression getRegexp() 
   {
      return firstChildOfType(RegularExpression.class);
   }

   @Override
   public boolean matchesEmptyString() {
       return getRegexp().matchesEmptyString(); 
   }
}

INJECT ZeroOrMoreRegexp : 
   import org.congocc.core.RegularExpression;
   extends RegularExpression;
{
   public RegularExpression getRegexp() 
   {
      return firstChildOfType(RegularExpression.class);
   }
   
   public void setRegexp(RegularExpression regexp) {
      RegularExpression current = getRegexp();
      if (current != null) {
          replaceChild(current, regexp);
      } else {
          addChild(0, regexp);
      }
   }

   @Override
   public boolean matchesEmptyString() {
       return true;
   }
}

INJECT ZeroOrOneRegexp : 
   import org.congocc.core.RegularExpression;
   extends RegularExpression;
{
   public RegularExpression getRegexp() 
   {
      return firstChildOfType(RegularExpression.class);
   }
   
   public void setRegexp(RegularExpression regexp) {
      RegularExpression current = getRegexp();
      if (current != null) {
          addChild(indexOf(current), regexp);
          removeChild(current);
      } else {
          addChild(0, regexp);
      }
   }

   @Override
   public boolean matchesEmptyString() {
       return true;
   }
}

CharacterList :
  ["~"]
  "[" [CharacterRange
        ( "," CharacterRange)*
      ]
  "]"
;

INJECT CharacterList : 
   import java.util.*;
   import org.congocc.core.*;
   extends RegularExpression;
{
    public List<CharacterRange> getDescriptors() {
        return childrenOfType(CharacterRange.class);
    }

    public boolean isNegated() {
        return firstChildOfType(TILDE) != null;
    }

    @Override
    public boolean matchesEmptyString() {
            return false;
        }
    }

CharacterRange# :
    (<STRING_LITERAL>|<CHARACTER_LITERAL>)
    [ 
    "-"
    (<STRING_LITERAL>|<CHARACTER_LITERAL>)
   ]
;

INJECT CharacterRange :
  import java.util.ArrayList;
{
    @Property int left, right;
    
    public CharacterRange() {} 
    
    public CharacterRange(int left, int right) {
        setRange(left, right);
    }
    
    public void setRange(int left, int right) {
        if (left > right) {
            throw new ArrayIndexOutOfBoundsException();
        }
        this.left = left;
        this.right = right;
    }

    public boolean isSingleChar() {
       return left == right;
    }

    static private boolean isSingleChar(String s) {
       if (s.length() == 1) return true;
       if (s.length() == 2) {
           return Character.isSurrogatePair(s.charAt(0), s.charAt(1));
       }
       return false;
    }

    public void close() {
        java.util.List<Token> bounds = new ArrayList<>();
        for (Node n : children()) {
            if (n instanceof StringLiteral) bounds.add((Token) n);
            if (n instanceof CharacterLiteral) bounds.add((Token) n);
            if (bounds.size() >1) break;
        }
        String leftBound = StringLiteral.removeEscapesAndQuotes(bounds.get(0).getImage());
        String rightBound = leftBound;
        if (bounds.size() >1) {
            rightBound = StringLiteral.removeEscapesAndQuotes(bounds.get(1).getImage());
        }
        if (!isSingleChar(leftBound)) {
            getErrors().addError(bounds.get(0),
                    "String in character list may contain only one character.");
        }
        this.left = this.right = leftBound.codePointAt(0);
        if (!leftBound.equals(rightBound)) {
            if (!isSingleChar(rightBound)) {
                getErrors().addError(bounds.get(1),
                        "String in character list may contain only one character.");
            }
        }
        if (bounds.size()>1) {
            String right = StringLiteral.removeEscapesAndQuotes(bounds.get(1).getImage());
            if (!isSingleChar(right)) {
                getErrors().addError(bounds.get(1),
                        "String in character list may contain only one character.");
            }
            this.right = right.codePointAt(0);
        }
        if (this.left>this.right) {
            getErrors().addError(this, "The left side of the character range must be a lower ordinal (in Unicode) value than the right side.");
        }
    }
}
