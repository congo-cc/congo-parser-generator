<project name="congocc" default="jar" basedir=".">
  <tstamp>
    <format property="timestamp" pattern="yyyy-MM-dd HH:mm:ss" />
  </tstamp>

  <target name="init">
    <uptodate property="parser.uptodate" targetfile="build/generated-java/org/congocc/parser/CongoCCParser.java">
      <srcfiles dir="src/grammars" includes="CongoCC.ccc"/>
      <srcfiles dir="src/grammars" includes="Lexical.inc.ccc"/>
      <srcfiles dir="examples/java" includes="*.ccc"/>
    </uptodate>
    <uptodate property="preprocessor.uptodate"
      targetfile="build/generated-java/org/congocc/preprocessor/PreprocessorParser.java"
      srcfile="examples/preprocessor/Preprocessor.ccc"
    />
    <uptodate property="python.uptodate"
      targetfile="build/generated-java/org/congocc/parser/python/PythonParser.java">
      <srcfiles dir="src/grammars" includes="PythonInternal.ccc"/>
      <srcfiles dir="examples/python" includes="*.ccc"/>
    </uptodate>
    <uptodate property="csharp.uptodate"
      targetfile="build/generated-java/org/congocc/parser/csharp/CSharpParser.java">
      <srcfiles dir="src/grammars" includes="CSharpInternal.ccc"/>
      <srcfiles dir="examples/csharp" includes="*.ccc"/>
    </uptodate>
    <uptodate property="templates.uptodate"
      targetfile="build/generated-java/org/congocc/templates/core/parser/CTLParser.java">
      <!--srcfiles dir="src/grammars" includes="CTLInternal.ccc"/ -->
      <srcfiles dir="examples/congo-templates" includes="*.ccc"/>
    </uptodate>
    <uptodate property="ppline.uptodate"
      targetfile="build/generated-java/org/parsers/csharp/ppline/PPDirectiveLineParser.java"
      srcfile="examples/csharp/PPDirectiveLine.ccc" />
  </target>

  <target name="restore-bootstrap-jar">
    <exec executable="git" dir="${basedir}">
      <arg line="checkout bin/congocc.jar" />
    </exec>
  </target>

  <!--
     Build and test using the bootstrap jarfile, then
     drop in the newly built jarfile and build and test again
-->
  <target name="full-test" depends="restore-bootstrap-jar,clean,jar,test">
    <echo>Now we copy the new congocc.jar to bin to rebootstrap</echo>
    <copy file="congocc.jar" todir="bin" />
    <antcall target="clean" />
    <antcall target="test" />
  </target>

  <target name="clean">
    <delete file="congocc.jar" />
    <delete file="congocc-minimal.jar" />
    <delete dir="build" />
    <delete><fileset dir="." includes="**/*.class"/></delete>
    <ant target="clean" dir="examples/json" />
    <ant target="clean" dir="examples/java" />
    <ant target="clean" dir="examples/python" />
    <ant target="clean" dir="examples/csharp" />
    <ant target="clean" dir="examples/lua" />
    <ant target="clean" dir="examples/preprocessor" />
    <ant target="clean" dir="examples/cics" />
    <!--ant target="clean" dir="examples/freemarker" /-->
  </target>

  <macrodef name="congocc">
    <attribute name="target"/>
    <attribute name="args" default="-n -q"/>
    <sequential>
      <echo message="Building parser from @{target}"/>
      <java fork="true" jar="${basedir}/bin/congocc.jar" failonerror="true">
        <assertions><enable/></assertions>
        <arg line="@{args} @{target}"/>
      </java>
    </sequential>
  </macrodef>

  <target name="parser-gen" unless="parser.uptodate">
    <congocc target="src/grammars/CongoCC.ccc"/>
  </target>
  <target name="preprocessor-gen" unless="preprocessor.uptodate">
    <congocc target="examples/preprocessor/Preprocessor.ccc"/>
  </target>
  <target name="ppline-gen" unless="ppline.uptodate">
    <congocc target="examples/csharp/PPDirectiveLine.ccc" args="-n -q -d ../../build/generated-java" />
  </target>
  <target name="python-gen" unless="python.uptodate">
    <congocc target="src/grammars/PythonInternal.ccc"/>
  </target>
  <target name="csharp-gen" unless="csharp.uptodate">
    <congocc target="src/grammars/CSharpInternal.ccc"/>
  </target>
  <target name="templates-gen" unless="templates.uptodate">
    <congocc target="examples/congo-templates/CTL.ccc"/>
    <!--congocc target="src/grammars/CTLInternal.ccc"/-->
  </target>


  <target name="build-parsers" depends="init">
    <parallel>
      <antcall target="parser-gen"/>
      <antcall target="preprocessor-gen"/>
      <antcall target="ppline-gen"/>
      <antcall target="python-gen"/>
      <antcall target="csharp-gen"/>
      <antcall target="templates-gen"/>
    </parallel>
  </target>

  <target name="compile" depends="build-parsers">
    <mkdir dir="build" />
    <javac destdir="build"
      deprecation="off"
      debug="on"
      optimize="off"
      failonerror="true"
      includeantruntime="false"
      release="17">
      <src path="src/java"/>
      <src path="build/generated-java"/>
      <compilerarg value="-Xlint:deprecation" />
    </javac>
    <copy todir="build/templates">
      <fileset dir="src/templates">
        <include name="**/*.ctl" />
      </fileset>
    </copy>
    <copy todir="build/include">
      <fileset dir="examples">
        <include name="csharp/*.ccc"/>
        <include name="java/*.ccc"/>
        <include name="json/*.ccc"/>
        <include name="lua/*.ccc"/>
        <include name="python/*.ccc"/>
      </fileset>
    </copy>
  </target>

  <target name="templates-compile" depends="templates-gen">
    <mkdir dir="build" />
    <javac destdir="build"
      deprecation="off"
      debug="on"
      optimize="off"
      failonerror="true"
      includeantruntime="false"
      release="17">
      <src path="src/java/org/congocc/templates/"/>
      <src path="build/generated-java/org/congocc/templates/" />
      <compilerarg value="-Xlint:deprecation" />
    </javac>
  </target>


  <target name="test" depends="jar">
    <echo>Testing the JSON Parser</echo>
    <ant dir="examples/json" target="clean" />
    <ant dir="examples/json" target="test" />
    <echo>Testing the CICS parser</echo>
    <ant dir="examples/cics" target="clean" />
    <ant dir="examples/cics" target="test" />
    <echo>Testing the Preprocessor</echo>
    <ant dir="examples/preprocessor" target="clean" />
    <ant dir="examples/preprocessor" target="test" />
    <echo>Testing the Lua parser</echo>
    <ant dir="examples/lua" target = "clean" />
    <ant dir="examples/lua" target = "test" />
    <echo>Testing the CSharp parser standalone</echo>
    <ant dir="examples/csharp" target="clean" />
    <ant dir="examples/csharp" target="test" />
    <echo>Testing the Java parser standalone</echo>
    <ant dir="examples/java" target="clean" />
    <ant dir="examples/java" target="test" />
    <echo>Building the Python parser</echo>
    <ant dir="examples/python" target="clean" />
    <ant dir="examples/python" target="test" />
    <!--echo>Testing the newer FreeMarker parser</echo>
    <ant dir="examples/freemarker" target="clean" />
    <ant dir="examples/freemarker" target="test" /-->
  </target>

  <target name="test-java" depends="jar">
    <echo>Testing the Java parser standalone"</echo>
    <ant dir="examples/java" target="clean" />
    <ant dir="examples/java" target="test" />
  </target>

  <target name="minimal-jar" depends="compile">
    <echo>Creating minimal jarfile, using this requires a CTL.jar in the same directory</echo>
    <jar jarfile="congocc-minimal.jar" basedir="build" compress="true" excludes="**/*.java">
      <manifest>
        <attribute name="Main-Class" value="org.congocc.app.Main" />
        <attribute name="Class-Path" value="CTL.jar bin/CTL.jar" />
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Date" value="${timestamp}" />
      </manifest>
    </jar>
  </target>

  <target name="jar" depends="compile">
    <echo>Creating jar with all dependencies included</echo>
    <jar jarfile="congocc.jar" compress="true" excludes="**/*.java">
      <fileset dir="build" includes="include/,org/,templates/"/>
      <manifest>
        <attribute name="Main-Class" value="org.congocc.app.Main" />
        <attribute name="Built-By" value="${user.name}" />
        <attribute name="Build-Date" value="${timestamp}" />
      </manifest>
    </jar>
  </target>

  <target name="templates-jar" depends="templates-compile">
     <jar jarfile="congo-templates.jar" basedir="build" compress="true" includes="org/congocc/templates/**/*.class">
        <manifest>
           <attribute name="Main-Class" value="org.congocc.templates.core.CommandLine"/>
           <attribute name="Built-By" value="${user.name}"/>
           <attribute name="Build-Date"   value="${timestamp}"/>
        </manifest>
     </jar>
  </target>

  <target name="update-bootstrap">
    <!--
      Update the bootstrap congocc.jar using the current congocc.jar built from the current
      source. To cater for template changes, the process needs to be repeated once to
      ensure that the templates are up to date, and again to ensure that any generated
      code is using the updated templates.
    -->
    <echo>Ensuring templates are up to date in the bootstrap jar ...</echo>
    <antcall target="clean"/>
    <antcall target="jar"/>
    <echo>Copying current jar to bootstrap location ...</echo>
    <copy file="congocc.jar" todir="bin" />
    <echo>Ensuring any generated code is up to date in the bootstrap jar ...</echo>
    <antcall target="clean"/>
    <antcall target="jar"/>
    <echo>Copying current jar to bootstrap location ...</echo>
    <copy file="congocc.jar" todir="bin" />
  </target>

  <target name="test-misc" depends="jar">
    <exec executable="python3" dir="${basedir}" failonerror="true">
      <env key="PY_DEBUG" value="1"/>
      <arg line="-u misc_tests.py -v" />
    </exec>
  </target>
</project>
